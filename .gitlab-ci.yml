stages:
  - pages
  - documentation
  - build
  - install-kickoff
  - install-check
  - install-snapshot
  - templates-build
  - templates-check
  - templates-snapshot
  - client
  - range-admin-deploy
  - range-admin-check
  - range-admin-snapshot
  - post-deploy-admin-testing
  - post-deploy-admin-power
  - post-deploy-admin-ansible
  - post-deploy-admin-user
  - post-deploy-admin-templates
  - range-user-deploy
  - range-user-check
  - range-user-snapshot
  - post-deploy-user-testing
  - post-deploy-user-power
  - post-deploy-user-ansible
  - post-deploy-user-user
  - post-deploy-user-templates
  - post-deploy-user-snapshots
  - integration
  - manual
  - upload
  - release

################
# YAML ANCHORS #
################
# This is a Yaml script anchor to do all the standard setup to prepare fo CI tasks - update the server and load the CI user API key
.common-setup: &common-setup
  # Sync time in the event this test is being run after a snapshot rollback
  - sudo /usr/sbin/chronyd -q 'pool pool.ntp.org iburst' || sudo /usr/bin/chronyc -m 'burst 3/3' 'makestep 0.5 -1'
  - date
  - cd binaries
  # Update the server to make sure we are running the latest version if a packer or ansible build is not running
  - pgrep -f 'ansible|packer' || sudo ./ludus-server --update
  # Move the latest client to /usr/local/bin for clean commands
  - sudo cp -f ludus-client_linux-amd64 /usr/local/bin/ludus
  - cd ..
  # Set the config to use the "user" API by default
  - mkdir -p ~/.config/ludus/
  - 'echo "url: https://127.0.0.1:8080" > ~/.config/ludus/config.yml'
  # Start as the ROOT user
  - export LUDUS_API_KEY=$(sudo cat /opt/ludus/install/root-api-key)

.powered-on-and-not-in-testing: &powered-on-and-not-in-testing
  # Start from a known state (in the event this is a retry)
  # Power on all VMs if we are not in a "user" test as admin (admin VMs are powered off for user tests to save resources)
  - |
    if [[ ! ($(ludus range list --json | jq "all(.VMs[].poweredOn; . == true)") == "true") && ("$CI_JOB_NAME" != *"-user"* && "$LUDUS_USER_ID" != "CIU") ]]; then 
      echo "Not all VMs are powered on, powering on now"
      ludus power on -n all
      timeout 180 bash -c 'until [[ $(ludus range list --json | jq "all(.VMs[].poweredOn; . == true)") == "true" ]]; do sleep 5; done'
    fi
  # Exit testing mode if we failed mid-testing mode and this is a retry
  - if [[ "$(ludus testing status --json | jq '.testingEnabled')" == "true" ]]; then echo "Tested mode was on, stopping it now"; ludus testing stop; fi

.ci-setup-admin: &ci-setup-admin
  - *common-setup
  # Add the CIA user if it doesn't already exist, try 5 times since the server just restarted the first might fail
  - for i in {1..5}; do (ludus --url https://127.0.0.1:8081 users list all | grep -q 'Continuous Integration Admin' || ludus --url https://127.0.0.1:8081 users add -a -n "Continuous Integration Admin" -i CIA) && break || sleep 5; done
  # Switch to CIA user API Key - only request it once, save it to disk
  - if [ ! -f /opt/ludus/ci/.apikey-admin ]; then ludus --url https://127.0.0.1:8081 --json --user CIA users apikey --no-prompt | jq -r '.result.apiKey' > /opt/ludus/ci/.apikey-admin; fi
  # Set the CIA user key as the key for all future ludus operations
  - export LUDUS_API_KEY=$(cat /opt/ludus/ci/.apikey-admin)
  - export LUDUS_USER_ID=$(ludus user list --json | jq -r '.[].userID')
  - *powered-on-and-not-in-testing
  # Set the config to simple-domain.yml if all templates are built
  - if [ $(ludus templates list --json | jq '[.[] | select(.built == false)] | length' || echo 1) -eq 0 ]; then ludus range config set -f ludus-server/ci/configs/simple-domain.yml; fi

.ci-setup-user: &ci-setup-user
  - *common-setup
  # Add the CIU user if it doesn't already exist, try 5 times since the server just restarted the first might fail
  - for i in {1..5}; do (ludus --url https://127.0.0.1:8081 users list all | grep -q 'Continuous Integration User' || ludus --url https://127.0.0.1:8081 users add -n "Continuous Integration User" -i CIU) && break || sleep 5; done
  # Switch to CIU user API Key - only request it once, save it to disk
  - if [ ! -f /opt/ludus/ci/.apikey-user ]; then ludus --url https://127.0.0.1:8081 --json --user CIU users apikey --no-prompt | jq -r '.result.apiKey' > /opt/ludus/ci/.apikey-user; fi
  # Set the CIU user key as the key for all future ludus operations
  - export LUDUS_API_KEY=$(cat /opt/ludus/ci/.apikey-user)
  - export LUDUS_USER_ID=$(ludus user list --json | jq -r '.[].userID')
  - *powered-on-and-not-in-testing
  # Set the config to simple-domain.yml
  - ludus range config set -f ludus-server/ci/configs/simple-domain.yml

.ansible-tests: &ansible-tests
  # Add and remove a role
  - ludus ansible role list
  - ludus ansible role rm geerlingguy.docker || true
  - ludus ansible role add geerlingguy.docker
  - ludus ansible role list | grep geerlingguy.docker
  - ludus ansible role rm geerlingguy.docker
  - '! ludus ansible role list | grep geerlingguy.docker'
  # Install a specific version
  - ludus ansible role add geerlingguy.docker --version 7.0.1
  - ludus ansible role list | grep geerlingguy.docker | grep 7.0.1
  # Test the force install
  - set +o pipefail # We expect the first command in the next line to fail, so allow it so long as the grep succeeds
  - ludus ansible role add geerlingguy.docker 2>&1 | grep 'geerlingguy.docker (7.0.1) is already installed'
  - set -o pipefail
  - ludus ansible role add geerlingguy.docker --force
  - ludus ansible role list | grep geerlingguy.docker
  - '! ludus ansible role list | grep geerlingguy.docker | grep 7.0.1'
  # Test collections
  - ludus ansible collection list
  - ludus ansible collection add maxhoesel.smallstep || true
  - ludus ansible collection list | grep maxhoesel.smallstep
  # Force install a collection
  - ludus ansible collection add maxhoesel.smallstep --version 0.24.4 --force
  - ludus ansible collection list | grep maxhoesel.smallstep | grep 0.24.4
  # Depends on tests
  - ludus ansible role add -d ludus-server/ci/roles/hello_world --force
  - ludus ansible role add -d ludus-server/ci/roles/first --force
  - ludus ansible role add -d ludus-server/ci/roles/second --force
  - ludus ansible role add -d ludus-server/ci/roles/third --force
  - ludus range config set -f ludus-server/ci/configs/depends-on.yml
  - ludus range deploy -t user-defined-roles
  - while [ "$(ludus range list --json | jq -r '.rangeState')" != "SUCCESS" ]; do ludus range logs --tail 20; sleep 60; done
  # Depends on - dependency that doesn't exist test
  - set +o pipefail # We expect the first command in the next line to fail, so allow it so long as the grep succeeds
  - 'ludus range config set -f ludus-server/ci/configs/depends-on-not-found.yml 2>&1 | egrep "ERROR: Dependency not found \w+-ad-dc-win2022-server-x64-1:geerlingguy.docker"'
  # Depends on circular dependency test
  - 'ludus range config set -f ludus-server/ci/configs/depends-on-circular.yml 2>&1 | egrep "ERROR: Circular dependency found for \w+-ad-win11-22h2-enterprise-x64-1:geerlingguy.docker"'
  - set -o pipefail
  - ludus range config set -f ludus-server/ci/configs/depends-on-complex.yml
  - ludus range deploy -t user-defined-roles
  - while [ "$(ludus range list --json | jq -r '.rangeState')" != "SUCCESS" ]; do ludus range logs --tail 20; sleep 60; done


.testing-mode-tests: &testing-mode-tests
  - export WIN11VMID=$(sudo qm list | grep running | grep win11 | head -1 | awk '{print $1}') # TODO use the API
  - ludus testing status
  # Validate that WIN10 can reach the internet
  - "sudo qm guest exec $WIN11VMID -- ping -n 1 8.8.8.8 | grep 'Reply from 8.8.8.8: bytes=32'"
  - sudo qm guest exec $WIN11VMID -- curl https://google.com/ | grep 'HTML'
  - ludus testing start
  - ludus testing status
  - ludus range list
  # Validate that WIN10 cannot reach the internet
  - sudo qm guest exec $WIN11VMID -- ping -n 1 8.8.8.8 | egrep 'Request timed out.|Destination port unreachable.'
  # Sometimes the DNS lookup is cached from the test above, so test for a DNS failure or a connect failure
  - sudo qm guest exec $WIN11VMID -- curl https://google.com/ | egrep 'Could not resolve host|Failed to connect to google.com'
  - ludus testing allow -i 8.8.8.8
  - ludus testing status
  # Validate that WIN10 can get to 8.8.8.8 but not 1.1.1.1
  - "sudo qm guest exec $WIN11VMID -- ping -n 1 8.8.8.8 | grep 'Reply from 8.8.8.8: bytes=32'"
  - sudo qm guest exec $WIN11VMID -- ping -n 1 1.1.1.1 | egrep 'Request timed out.|Destination port unreachable.'
  # Allow google.com and check that google is allowed but example isn't
  - ludus testing allow -d google.com
  - ludus testing status
  # This sometimes takes a few seconds - try 3 times 5 seconds apart
  - for i in {1..3}; do (sudo qm guest exec $WIN11VMID -- curl https://google.com/ | grep 'HTML') && break || sleep 5; done
  - sudo qm guest exec $WIN11VMID -- curl https://example.com/ | egrep 'Could not resolve host|Failed to connect to example.com'
  # Deny google.com and 8.8.8.8 and check that they are not reachable
  - ludus testing deny -d google.com
  - ludus testing deny -i 8.8.8.8
  - for i in {1..3}; do (sudo qm guest exec $WIN11VMID -- curl https://google.com/ | egrep 'Could not resolve host|Failed to connect to google.com') && break || sleep 5; done
  - for i in {1..3}; do (sudo qm guest exec $WIN11VMID -- ping -n 1 8.8.8.8 | egrep 'Request timed out.|Destination port unreachable.') && break || sleep 5; done
  - ludus testing stop
  - ludus testing status
  # Now that testing has stopped, check the VM can reach the internet
  - "sudo qm guest exec $WIN11VMID -- ping -n 1 8.8.8.8 | grep 'Reply from 8.8.8.8: bytes=32'"
  - sudo qm guest exec $WIN11VMID -- curl https://google.com/ | grep 'HTML'

.power-tests: &power-tests
  # Power on/off tests - single VM
  - ludus power off -n ${LUDUS_USER_ID}-kali
  - timeout 60 bash -c 'until [[ $(ludus range list --json | jq ".VMs[] | select(.name == \"${LUDUS_USER_ID}-kali\").poweredOn") == "false" ]]; do echo "Waiting for ${LUDUS_USER_ID}-kali to power off"; sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'On'
  - ludus power on -n ${LUDUS_USER_ID}-kali
  - timeout 60 bash -c 'until [[ $(ludus range list --json | jq ".VMs[] | select(.name == \"${LUDUS_USER_ID}-kali\").poweredOn") == "true" ]]; do echo "Waiting for ${LUDUS_USER_ID}-kali to power on"; sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'On'    
  # Power on/off tests - comma separated
  - ludus power off -n ${LUDUS_USER_ID}-kali,${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1
  - timeout 120 bash -c 'until [[ $(ludus range list --json | jq "[.VMs[] | select(.name == \"${LUDUS_USER_ID}-kali\" or .name == \"${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1\").poweredOn] | all(.[]; . == false)") == "true" ]]; do echo "Waiting for ${LUDUS_USER_ID}-kali and ${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1 to power off"; sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'On'
  - ludus power on -n ${LUDUS_USER_ID}-kali,${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1
  - timeout 120 bash -c 'until [[ $(ludus range list --json | jq "[.VMs[] | select(.name == \"${LUDUS_USER_ID}-kali\" or .name == \"${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1\").poweredOn] | all(.[]; . == true)") == "true" ]]; do echo "Waiting for ${LUDUS_USER_ID}-kali and ${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1 to power on"; sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'On'
  # Power on/off tests - "all"
  - ludus power off -n all
  - timeout 180 bash -c 'until [[ $(ludus range list --json | jq "all(.VMs[].poweredOn; . == false)") == "true" ]]; do sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'Off'
  - ludus range status | grep "${LUDUS_USER_ID}-router-debian11-x64" | grep 'Off'
  - ludus power on -n all
  - timeout 180 bash -c 'until [[ $(ludus range list --json | jq "all(.VMs[].poweredOn; . == true)") == "true" ]]; do sleep 5; done'
  - ludus range status | grep "${LUDUS_USER_ID}-kali" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-win11-22h2-enterprise-x64-1" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-ad-dc-win2022-server-x64" | grep 'On'
  - ludus range status | grep "${LUDUS_USER_ID}-router-debian11-x64" | grep 'On'

.template-tests: &template-tests
  # Remove debian 10 if it exists (retry)
  - ludus templates list --json | jq -r '.[] | select(.name == "debian-10-x64-server-template") | .name' | grep -q 'debian-10-x64-server-template' && ludus templates rm -n "debian-10-x64-server-template" || echo "No debian10 on the server"
  - cd templates
  - ludus templates list
  - ludus templates add -d debian10
  - ludus templates list
  - set +o pipefail
  - ludus templates add -d debian10 2>&1 | grep 'Template already exists, use --force to overwrite it'
  - mkdir /tmp/test-template || true
  - echo "debian-10-x64-server-template" > /tmp/test-template/test.pkr.hcl
  - 'ludus templates add -d /tmp/test-template/test.pkr.hcl 2>&1 | grep "Error finding .pkr.hcl or .pkr.json template files: the provided path is not a directory"'
  - ludus templates add -d /tmp/test-template 2>&1 | grep "The uploaded template name is already present on the server. Template names must be unique."
  - ludus templates add -d ../ludus-server/packer/kali 2>&1 | grep "The uploaded template name is already present on the server. Template names must be unique."
  - ludus templates add -d ../ludus-server/packer/kali --force 2>&1 | grep "'kali-x64-desktop-template' is a template that does not belong to you"
  - set -o pipefail
  - ludus templates add -d debian10 --force
  - ludus templates list
  - ludus templates build -n debian-10-x64-server-template
  - ludus templates status
  - ludus templates status | grep debian-10-x64-server-template
  - ludus templates status | grep continuous-integration-
  # Wait for the template to build
  - while [ $(ludus templates list --json | jq '[.[] | select(.built == false)] | length' || echo 1) -ne 0 ]; do date; sleep 60; done
  - ludus templates logs
  - ludus templates list
  - ludus templates rm -n debian-10-x64-server-template
  - '! ludus templates list | grep "debian-10-x64-server-template"'

.snapshot-tests: &snapshot-tests
  - ludus snapshots list
  - ludus snapshots create test-full-range-snapshot
  - ludus snapshots list
  - ludus snapshots revert test-full-range-snapshot
  - ludus snapshots rm test-full-range-snapshot
  - export WIN11VMID=$(sudo qm list | grep running | grep win11 | head -1 | awk '{print $1}') # TODO use the API
  - ludus snapshots create test-win11-snapshot -n $WIN11VMID -d "Test snapshot"
  - ludus snapshots list -n $WIN11VMID
  - ludus snapshots revert test-win11-snapshot -n $WIN11VMID
  - ludus snapshots rm test-win11-snapshot -n $WIN11VMID
  - ludus snapshots list -n $WIN11VMID
  - ludus snapshots create test-win11-snapshot-2 -n $WIN11VMID -d "Test snapshot 2" -r
  - ludus snapshots list -n $WIN11VMID
  - ludus snapshots revert test-win11-snapshot-2 -n $WIN11VMID
  - ludus snapshots rm test-win11-snapshot-2 -n $WIN11VMID
  - ludus snapshots list -n $WIN11VMID
  - ludus range status
  - ludus power on -n all
  - sleep 10
  - ludus range status
  
#################
# DOCUMENTATION #
#################
pages:
  stage: pages
  variables:
    LUDUS_BUILD_TYPE: any-built
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_MESSAGE =~ /\[build pages\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip build\]/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" # Only update public docs in the main branch
      changes:
        - "docs/**/*"
  retry:
    max: 2
  script:
  - cd docs
  # Change the base URL as we are hosting the site straight off the root of the domain
  - "sed -i \"s|baseUrl: '/ludus/'|baseUrl: '/'|\" docusaurus.config.js"
  - yarn install
  - yarn build
  - rm -f ./build/video/*
  - mv ./build ../public
  artifacts:
    paths:
    - public

documentation:
  stage: documentation
  variables:
    LUDUS_BUILD_TYPE: any-built
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_MESSAGE =~ /\[build docs\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip build\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at / # Any "start-at" will skip the doc build to speed up CI
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - changes:
      - "docs/**/*"
  retry:
    max: 2
  script:
  - cd docs
  - yarn install
  - yarn build
  - rm -f ./build/video/*
  - rm -f ./build/img/hardware/Debian_12_RAID0.mp4
  - mv ./build ../built-docs
  artifacts:
    paths:
    - built-docs

#########
# BUILD #
#########
build all:
  stage: build
  tags:
    - ludus-proxmox-runner
  dependencies:
    - documentation
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_MESSAGE =~ /\[skip build\]/
      when: never
    - changes:
      - "**/*"
  artifacts:
    paths:
      - binaries/*
    expire_in: 1 week
  variables:
    LUDUS_BUILD_TYPE: any-built # we are just building go code, use any CI VM
  timeout: 10m
  script:
    - echo "Compiling the server code..."
    - export GIT_COMMIT_SHORT_HASH=$(git rev-parse --short HEAD)
    - if [[ -n $CI_COMMIT_TAG ]]; then export VERSION=$CI_COMMIT_TAG; else export VERSION=${CI_COMMIT_BRANCH}; fi
    - mkdir binaries
    - cd ludus-server
    - | # If we have docs from the previous stage, embed them, otherwise build without docs
      if [[ -d ../built-docs ]]; then
        mv ../built-docs ../ludus-api/docs
        CGO_ENABLED=1 go build -trimpath -ldflags "-s -w -X main.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X main.VersionString=$VERSION" -tags=embeddocs -o ../binaries/ludus-server
      else
        CGO_ENABLED=1 go build -trimpath -ldflags "-s -w -X main.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X main.VersionString=$VERSION" -o ../binaries/ludus-server
      fi
    - cd ..
    - echo "Compiling the client code..."
    - cd ludus-client
    # Use the fork that doesn't break the terminal on control+c for Linux and macOS
    - git clone https://github.com/zimeg/spinner
    - cd spinner && git checkout unhide-interrupts && cd .. && go mod edit -replace github.com/briandowns/spinner=./spinner
    - CGO_ENABLED=0 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_linux-amd64
    - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_linux-arm64
    - CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_linux-arm
    - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_macOS-amd64
    - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_macOS-arm64
    # The forked spinner library doesn't compile for windows, so switch back to the original
    - go mod edit -dropreplace=github.com/briandowns/spinner
    - CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_windows-amd64.exe
    - CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_windows-386.exe
    - CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -trimpath -ldflags "-s -w -X ludus/cmd.GitCommitHash=$GIT_COMMIT_SHORT_HASH -X ludus/cmd.VersionString=$VERSION" -o ../binaries/ludus-client_windows-arm64.exe
    - cd ..
    # If this is a release, build the enterprise and anti-sandbox plugins at the same time on the same build machine so the binaries are compatible
    - |
      if [[ ! -z ${CI_COMMIT_TAG+x} ]]; then
        git clone https://ludus-enterprise:${LUDUS_ENTERPRISE_GITLAB_TOKEN}@gitlab.com/badsectorlabs/ludus-enterprise-plugin.git
        go work use ./ludus-enterprise-plugin
        cd ludus-enterprise-plugin
        git config --global --add safe.directory $PWD
        GIT_COMMIT_SHORT_HASH=$(git rev-parse --short HEAD)
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -buildmode=plugin -trimpath -ldflags "-s -w -X main.GitCommitHash=${GIT_COMMIT_SHORT_HASH} -X main.VersionString=${CI_COMMIT_TAG}" -tags=embeddocs -o ../binaries/ludus-enterprise.so
        cd ..
        # Build the anti-sandbox plugin
        git clone https://ludus-antisandbox:${LUDUS_ANTISANDBOX_GITLAB_TOKEN}@gitlab.com/badsectorlabs/ludus-antisandbox-plugin.git
        go work use ./ludus-antisandbox-plugin
        cd ludus-antisandbox-plugin
        git config --global --add safe.directory $PWD
        GIT_COMMIT_SHORT_HASH=$(git rev-parse --short HEAD)
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -buildmode=plugin -trimpath -ldflags "-s -w -X main.GitCommitHash=${GIT_COMMIT_SHORT_HASH} -X main.VersionString=${CI_COMMIT_TAG}" -tags=embeddocs -o ../binaries/ludus-antisandbox.so
      fi
    - echo "Compile complete."

###########
# INSTALL #
###########
install kickoff:
  stage: install-kickoff
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at / # Any "start-at" will skip the install
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes: # Only run if we need to test installer related changes
      - ludus-server/*.go
      - ludus-server/ansible/proxmox-install/**/*
  variables:
    LUDUS_BUILD_TYPE: full # We have to test the install process, so do a full build
    LUDUS_INSTALL_STEP: kickoff
  timeout: 10m
  script:
    - sudo hostname ludus-$CI_PIPELINE_ID
    - sudo hostnamectl set-hostname ludus-$CI_PIPELINE_ID
    - cd binaries
    - sudo ./ludus-server --no-prompt ludus-$CI_PIPELINE_ID # This causes a reboot, handle it in the run.sh ci script

install check:
  stage: install-check
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at / # Any "start-at" will skip the install
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes: # Only run if we need to test installer related changes
      - ludus-server/*.go
      - ludus-server/ansible/proxmox-install/**/*
  variables:
    LUDUS_BUILD_TYPE: full
    LUDUS_INSTALL_STEP: check
  timeout: 1h
  script:
    - sudo cat /opt/ludus/install/install.log
    - echo "root:$CI_PIPELINE_ID" | sudo chpasswd # allow root login via the web interface for debugging

install snapshot:
  stage: install-snapshot
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at / # Any "start-at" will skip the install
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes: # Only run if we need to test installer related changes
      - ludus-server/*.go
      - ludus-server/ansible/proxmox-install/**/*
  variables:
    LUDUS_BUILD_TYPE: full
    LUDUS_INSTALL_STEP: take-snapshot  # The magic happens in prepare.sh
    LUDUS_SNAPSHOT_NAME: clean_install
  timeout: 5m
  script:
    - echo "Snapshot complete"

#############
# TEMPLATES #
#############
templates build:
  stage: templates-build
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[template tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/packer/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: clean_install
  timeout: 5m
  script:
    - *ci-setup-admin
    # Build in parallel to speed up CI
    - ludus templates build --parallel 6

templates check:
  stage: templates-check
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[template tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/packer/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: clean_install
  timeout: 2h
  retry:
    max: 2
  script:
    - *ci-setup-admin
    # If there is no template building process, start one
    # This may happen on a failed ISO upload
    - pgrep -f 'packer' || ludus templates build 
    # Wait for all templates to build
    - while [ $(ludus templates list --json | jq '[.[] | select(.built == false)] | length' || echo 1) -ne 0 ]; do date; sleep 60; done
    - ludus templates list

templates snapshot:
  stage: templates-snapshot
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[template tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/packer/**/*
  variables:
    LUDUS_INSTALL_STEP: take-snapshot
    LUDUS_SNAPSHOT_NAME: templates_built
  timeout: 5m
  script:
    - echo "Snapshot complete"

##########
# CLIENT #
##########
client basic-commands:
  stage: client
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[client tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/**/*.go
      - ludus-server/ansible/range-management/**/*
      - ludus-server/ansible/user-management/**/*
      - ludus-server/ansible/user-files/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: clean_install
  timeout: 5m
  script:
    - *ci-setup-admin
    - ludus version
    - ludus version --verbose
    - ludus users creds get
    - ludus users wireguard
    - ludus range list all
    - ludus range list
    - ludus range config get
    - ludus templates list
    - ludus testing status
    - ludus range gettags

#################
# RANGE - ADMIN #
#################
range deploy-admin:
  stage: range-admin-deploy
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/range.go
      - ludus-server/ansible/range-management/**/*
      - ludus-server/ansible/user-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: templates_built
  timeout: 5m
  retry:
    max: 2
    when: 
      - script_failure
      - job_execution_timeout
  script:
    - *ci-setup-admin
    - ludus range config get
    - ludus range deploy

range check-admin:
  stage: range-admin-check
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: templates_built
  timeout: 3h
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - while [ "$(ludus range list --json | jq -r '.rangeState')" != "SUCCESS" ]; do ludus range logs --tail 20; sleep 60; done
    - ludus range logs
    - ludus range list
    # Check to make sure the IPs were set correctly
    - export valid_last_octets=(1 11 21 254)
    - ludus range list --json | jq -e --arg allowed_octets_str "${valid_last_octets[*]}" '($allowed_octets_str | split(" ") | map(tonumber)) as $allowed_list | all(.VMs[]; ((.ip | split(".")[-1] | tonumber) as $current_octet | any($allowed_list[]; . == $current_octet)))'
    - "[ \"$(ludus range list --json | jq -r '.rangeState')\" = \"SUCCESS\" ]"

range snapshot-admin:
  stage: range-admin-snapshot
  tags:
    - ludus-proxmox-runner
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_INSTALL_STEP: take-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 5m
  retry:
    max: 2
    when: script_failure
  script:
    - echo "Snapshot complete"

#######################
# POST-DEPLOY - ADMIN #
#######################
post-deploy testing-as-admin:
  stage: post-deploy-admin-testing
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[testing-mode tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/testing.go
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - *testing-mode-tests

post-deploy power-as-admin:
  stage: post-deploy-admin-power
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[power tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/power.go
      - ludus-server/ansible/range-management/power.yml
      - ludus-server/ansible/range-management/pre-run-checks.yml
      - ludus-server/ansible/range-management/tasks/proxmox/set-vm-state.yml
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - *power-tests

post-deploy ansible-as-admin:
  stage: post-deploy-admin-ansible
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[ansible tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/ansible.go
      - ludus-server/src/ansible.go
      - ludus-server/src/api_ansible.go
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - *ansible-tests

post-deploy user-cmds-as-admin:
  stage: post-deploy-admin-user
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[user tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/user.go
      - ludus-server/src/api_user_management.go
      - ludus-server/ansible/user-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    # Add an admin user
    - set +o pipefail # We expect the first command in the next line to fail, so allow it so long as the grep succeeds
    - ludus user add -a -n "Test Admin" -i TA 2>&1 | grep "You must use the ludus-admin server on 127.0.0.1:8081 to use this endpoint"
    - set -o pipefail
    - ludus --url https://127.0.0.1:8081 user add -a -n "Test Admin" -i TA
    - ludus users list all | grep "Test Admin"
    # Try to create a user with the same ID or name
    - set +o pipefail # We expect the first command in the next line to fail, so allow it so long as the grep succeeds
    - ludus --url https://127.0.0.1:8081 user add -n "Test Admin" -i TA2 2>&1 | grep "User with that name already exists"
    - ludus --url https://127.0.0.1:8081 user add -n "Test Admin 2" -i TA 2>&1 | grep "User with that ID already exists"
    - set -o pipefail
    # Get and set creds
    - ludus user creds get --user TA
    - ludus user creds set -i TA -p test-password-123
    - ludus user creds get --user TA | grep test-password-123
    # Get wireguard
    - ludus user wireguard --user TA | grep Endpoint
    # Remove admin user
    - set +o pipefail # We expect the first command in the next line to fail, so allow it so long as the grep succeeds
    - ludus user rm -i TA 2>&1 | grep "You must use the ludus-admin server on 127.0.0.1:8081 to use this endpoint"
    - set -o pipefail
    - ludus --url https://127.0.0.1:8081 user rm -i TA
    - '! ludus users list all | grep "Test Admin"'
    # Add a normal user
    - ludus --url https://127.0.0.1:8081 user add -n "Test User" -i TU
    - ludus users list all | grep "Test User"
    # Get and set creds
    - ludus user creds get --user TU
    - ludus user creds set -i TU -p test-password-123
    - ludus user creds get --user TU | grep test-password-123
    # Get wireguard
    - ludus user wireguard --user TU | grep Endpoint
    # Remove normal user
    - ludus --url https://127.0.0.1:8081 user rm -i TU
    - '! ludus users list all | grep "Test User"'

post-deploy templates-as-admin:
  stage: post-deploy-admin-templates
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[template tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/templates.go
      - ludus-server/src/api_template_management.go
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 45m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - *template-tests

################
# RANGE - USER #
################
range deploy-user:
  stage: range-user-deploy
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/range.go
      - ludus-server/ansible/range-management/**/*
      - ludus-server/ansible/user-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 5m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-admin
    - ludus power off -n all # Shut down the admin range to save resources
    - *ci-setup-user
    - ludus range config get
    - ludus range deploy

range check-user:
  stage: range-user-check
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_admin
  timeout: 3h
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - while [ "$(ludus range list --json | jq -r '.rangeState')" != "SUCCESS" ]; do ludus range logs --tail 20; sleep 60; done
    - ludus range logs
    - ludus range list
    # Check to make sure the IPs were set correctly
    - export valid_last_octets=(1 11 21 254)
    - ludus range list --json | jq -e --arg allowed_octets_str "${valid_last_octets[*]}" '($allowed_octets_str | split(" ") | map(tonumber)) as $allowed_list | all(.VMs[]; ((.ip | split(".")[-1] | tonumber) as $current_octet | any($allowed_list[]; . == $current_octet)))'
    - "[ \"$(ludus range list --json | jq -r '.rangeState')\" = \"SUCCESS\" ]"

range snapshot-user:
  stage: range-user-snapshot
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[range tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_INSTALL_STEP: take-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 5m
  retry:
    max: 2
    when: script_failure
  script:
    - echo "Snapshot complete"

#######################
# POST-DEPLOY - USER #
#######################
post-deploy testing-as-user:
  stage: post-deploy-user-testing
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[testing-mode tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/testing.go
      - ludus-server/ansible/range-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - *testing-mode-tests

post-deploy power-as-user:
  stage: post-deploy-user-power
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[power tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/power.go
      - ludus-server/ansible/range-management/power.yml
      - ludus-server/ansible/range-management/pre-run-checks.yml
      - ludus-server/ansible/range-management/tasks/proxmox/set-vm-state.yml
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - export LUDUS_USER_ID=$(ludus user list --json | jq -r '.[].userID')
    - *power-tests

post-deploy ansible-as-user:
  stage: post-deploy-user-ansible
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[ansible tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/ansible.go
      - ludus-server/src/ansible.go
      - ludus-server/src/api_ansible.go
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - *ansible-tests

post-deploy user-cmds-as-user:
  stage: post-deploy-user-user
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[user tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/user.go
      - ludus-server/src/api_user_management.go
      - ludus-server/ansible/user-management/**/*
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 15m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - set +o pipefail # lots of expected fails that we will grep in this job
    - ludus user list
    - ludus users list all 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    # Get and set our own creds
    - ludus user creds get
    - OG_PW=$(ludus user creds get --json | jq -r '.result.proxmoxPassword')
    - ludus user creds set -p test-password-123
    - ludus user creds get | grep test-password-123
    - ludus user creds set -p $OG_PW
    # Try to get and set other user's creds
    - ludus user creds get --user CIA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    - ludus user creds set -i CIA -p test-password-123 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    # Get wireguard
    - ludus user wireguard | grep Endpoint
    # Try to get other user's wireguard
    - ludus user wireguard --user CIA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    # Try to add an admin user
    - ludus user add -a -n "Test Admin" -i TA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    - ludus --url https://127.0.0.1:8081 user add -a -n "Test Admin" -i TA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    - '! ludus users list all | grep "Test Admin"'
    # Try to add a normal user
    - ludus --url https://127.0.0.1:8081 user add -n "Test User" -i TA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    - '! ludus users list all | grep "Test User"'
    # Try to remove a user
    - ludus --url https://127.0.0.1:8081 user rm -i CIA 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    # Try to get an api key for another user
    - ludus user apikey --user CIA --no-prompt 2>&1 | grep "This is an admin only endpoint or you queried another user and are not an admin"
    # Get a new API for ourselves
    - ludus user apikey --no-prompt

post-deploy templates-as-user:
  stage: post-deploy-user-templates
  tags:
    - ludus-proxmox-runner  
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[template tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/templates.go
      - ludus-server/src/api_template_management.go
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 45m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - *template-tests

post-deploy snapshots-as-user:
  stage: post-deploy-user-snapshots
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[post-deploy tests\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
    - changes:
      - ludus-client/cmd/snapshots.go
      - ludus-server/src/api_snapshot_management.go
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 45m
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    - *snapshot-tests

####################
# FINAL BOSS FIGHT #
####################
test-everything:
  stage: integration
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_TAG # Tags/Releases are created manually after successful full builds
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[integration test\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[full build\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[skip ci\]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at templates\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-admin\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at range-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at post-deploy-user\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[start-at integration\]/
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
      when: never
  variables:
    LUDUS_BUILD_TYPE: from-snapshot
    LUDUS_SNAPSHOT_NAME: range_built_user
  timeout: 3h
  retry:
    max: 2
    when: script_failure
  script:
    - *ci-setup-user
    # Delete the range to start fresh the first time the job is run
    - |
      if [[ $(ludus range list --json  | jq '.VMs[] | select(.name == "CIU-redirector") | .name' | wc -l) -eq 0 ]]; then
        ludus range rm --no-prompt
        timeout 180 bash -c 'until [[ $(ludus range list --json | jq ".numberOfVMs") == 0 ]]; do sleep 5; done'
      fi
    # Power cycle the range if this is a retry
    - |
      if [[ $(ludus range list --json  | jq '.VMs[] | select(.name == "CIU-redirector") | .name' | wc -l) -eq 1 ]]; then
        ludus power off -n all
        timeout 180 bash -c 'until [[ $(ludus range list --json | jq "all(.VMs[].poweredOn; . == false)") == "true" ]]; do sleep 5; done'
        ludus power on -n all
        timeout 180 bash -c 'until [[ $(ludus range list --json | jq "all(.VMs[].poweredOn; . == true)") == "true" ]]; do sleep 5; done'
      fi
    - ludus ansible role add geerlingguy.docker || true
    - ludus range config set -f ludus-server/ci/configs/integration-test.yml
    - ludus range deploy
    - while [ "$(ludus range list --json | jq -r '.rangeState')" == "DEPLOYING" ]; do date; sleep 60; done
    - if [[ "$(ludus range list --json | jq -r '.rangeState')" == "ERROR" ]]; then ludus range errors; fi
    - ludus range list
    - "[ \"$(ludus range list --json | jq -r '.rangeState')\" = \"SUCCESS\" ]"
    # Check to make sure the IPs were set correctly
    - export valid_last_octets=(1 2 11 12 21 254)
    - ludus range list --json | jq -e --arg allowed_octets_str "${valid_last_octets[*]}" '($allowed_octets_str | split(" ") | map(tonumber)) as $allowed_list | all(.VMs[]; ((.ip | split(".")[-1] | tonumber) as $current_octet | any($allowed_list[]; . == $current_octet)))'
    # Check for docker on the redirector
    - export REDIRECTOR_VMID=$(sudo qm list | grep running | grep redirector | head -1 | awk '{print $1}')
    - sudo qm guest exec $REDIRECTOR_VMID -- docker --version | grep 'Docker version'
    # Check that local user is in the docker group (was set in extra vars)
    - sudo qm guest exec $REDIRECTOR_VMID -- groups localuser | grep docker
    # Check for VSCodium (installed via chocolatey) on the Win 11 box
    - export WIN11_VMID=$(sudo qm list | grep running | grep win11 | head -1 | awk '{print $1}')
    - sudo qm guest exec $WIN11_VMID -- where /R "C:\Program Files" VSCodium.exe | grep VSCodium
    # Check for Word (installed via office_version) on the Win 11 box
    - sudo qm guest exec $WIN11_VMID -- where /R "C:\Program Files" WINWORD.exe | grep WINWORD
    # Check the domain is ludus.domain
    - sudo qm guest exec $WIN11_VMID -- cmd /c "echo %userdomain%" | grep ludus
    - sudo qm guest exec $WIN11_VMID -- ipconfig /all | grep ludus.domain
    # Check the dns_rewrites
    - sudo qm guest exec $WIN11_VMID -- ping -n 1 example.com | egrep 'example.com \[10.[1-9].20.1\]'
    - sudo qm guest exec $WIN11_VMID -- ping -n 1 abc123.example.com | egrep 'abc123.example.com \[10.[1-9].20.1\]'
    # Check the custom ansible groups
    - ludus range inventory | grep -A 2 customgroup1 | grep redirector
    - ludus range inventory | grep -A 2 customgroup2 | grep redirector
    # Check the FW rules
    - export ROUTER_VMID=$(sudo qm list | grep running | grep router | head -1 | awk '{print $1}')
    - sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g'
    - |
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'REJECT     tcp  --  \*      \*       10.[1-9].10.0/24         10.[1-9].20.0/24         tcp dpt:22 \/\* User Rule: Block SSH from VLAN 10 to VLAN 20 \*\/ reject-with icmp-port-unreachable'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       10.[1-9].10.0/24         10.[1-9].20.0/24         tcp dpts:1:80 /\* User Rule: Allow TCP ports 1 to 80 from VLAN 10 to VLAN 20 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       0.0.0.0/0            0.0.0.0/0            tcp dpt:443 source IP range 10.[1-9].10.11-10.[1-9].10.22 destination IP range 10.[1-9].20.1-10.[1-9].20.2 /\* User Rule: Allow the .11-.22 on VLAN 10 to access the .1 and .2 on VLAN 20 using TCP port 443 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       0.0.0.0/0            10.[1-9].20.1            tcp dpt:80 source IP range 10.[1-9].10.11-10.[1-9].10.22 /\* User Rule: Allow the .11-.22 on VLAN 10 to access the .1 on VLAN 20 using TCP port 80 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       10.[1-9].20.1            10.[1-9].10.21           tcp dpt:445 /\* User Rule: Only allow the .1 on VLAN 20 to hit port 445 of the .21 on VLAN 10 using TCP \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     all  --  \*      \*       10.[1-9].99.0/24         10.[1-9].10.0/24         /\* User Rule: Allow kali to all windows \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       10.[1-9].10.0/24         10.[1-9].99.0/24         tcp dpt:8080 /\* User Rule: Only allow windows to kali on 8080 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       10.[1-9].10.0/24         10.[1-9].99.0/24         tcp dpt:80 /\* User Rule: Only allow windows to kali on 80 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     tcp  --  \*      \*       10.[1-9].10.0/24         10.[1-9].99.0/24         tcp dpt:443 /\* User Rule: Only allow windows to kali on 443 \*/'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'REJECT     all  --  \*      \*       10.[1-9].0.0/16          10.[1-9].0.0/16          /\* User Default: Inter-VLAN Rule \*/ reject-with icmp-port-unreachable'
      sudo qm guest exec $ROUTER_VMID -- /sbin/iptables -nvL | jq -r '."out-data"' | sed 's/\\n/\n/g' | egrep 'ACCEPT     all  --  \*      \*       10.[1-9].0.0/16         !10.[1-9].0.0/16          /\* User Default: External Rule \*/'

##########
# MANUAL #
##########
manual testing:
  stage: manual
  tags:
    - ludus-proxmox-runner
  dependencies:
    - build all
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[manual\]/
  variables:
    LUDUS_BUILD_TYPE: any-built # Just move our code to the most recent CI VM for manual testing
  timeout: 15m
  script:
    - *ci-setup-admin
    - echo "manual testing"

###########
# RELEASE #
###########
gitlab-upload:
  stage: upload
  tags:
    - ludus-proxmox-runner
  needs:
    - build all
  variables:
    LUDUS_BUILD_TYPE: any-built
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ludus/${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-server ${PACKAGE_REGISTRY_URL}/ludus-server-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_linux-amd64 ${PACKAGE_REGISTRY_URL}/ludus-client_linux-amd64-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_linux-arm64 ${PACKAGE_REGISTRY_URL}/ludus-client_linux-arm64-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_linux-arm ${PACKAGE_REGISTRY_URL}/ludus-client_linux-arm-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_macOS-amd64 ${PACKAGE_REGISTRY_URL}/ludus-client_macOS-amd64-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_macOS-arm64 ${PACKAGE_REGISTRY_URL}/ludus-client_macOS-arm64-${CI_COMMIT_TAG}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_windows-amd64.exe ${PACKAGE_REGISTRY_URL}/ludus-client_windows-amd64-${CI_COMMIT_TAG}.exe'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_windows-386.exe ${PACKAGE_REGISTRY_URL}/ludus-client_windows-386-${CI_COMMIT_TAG}.exe'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file binaries/ludus-client_windows-arm64.exe ${PACKAGE_REGISTRY_URL}/ludus-client_windows-arm64-${CI_COMMIT_TAG}.exe'
    - touch ludus_${CI_COMMIT_TAG}_checksums.txt
    - cd binaries
    - sha256sum ludus-server >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_linux-amd64 >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_linux-arm64 >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_linux-arm >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_macOS-amd64 >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_macOS-arm64 >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_windows-amd64.exe >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_windows-386.exe >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - sha256sum ludus-client_windows-arm64.exe >> ../ludus_${CI_COMMIT_TAG}_checksums.txt
    - cd ..
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ludus_${CI_COMMIT_TAG}_checksums.txt ${PACKAGE_REGISTRY_URL}/ludus_${CI_COMMIT_TAG}_checksums.txt'

keygen-upload:
  stage: upload
  tags:
    - ludus-proxmox-runner
  needs:
    - build all
    - gitlab-upload # Just so they don't try to run at the same time
  variables:
    LUDUS_BUILD_TYPE: any-built
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - THIS_VERSION=$(echo ${CI_COMMIT_TAG} | tr -d 'v')
    - curl -sSL https://raw.pkg.keygen.sh/keygen/cli/latest/install.sh | sudo sh
    - output=$(keygen new --channel stable --version ${THIS_VERSION} 2>&1) || { [ "$?" -eq 1 ] && [[ "$output" =~ "VERSION_TAKEN" ]] && true; }
    - cd binaries
    - keygen upload ludus-client_linux-amd64 --release ${THIS_VERSION} --platform 'linux' --arch 'amd64' --filename ${THIS_VERSION}/ludus-client_linux-amd64
    - keygen upload ludus-client_linux-arm64 --release ${THIS_VERSION} --platform 'linux' --arch 'arm64' --filename ${THIS_VERSION}/ludus-client_linux-arm64
    - keygen upload ludus-client_linux-arm --release ${THIS_VERSION} --platform 'linux' --arch 'arm' --filename ${THIS_VERSION}/ludus-client_linux-arm
    - keygen upload ludus-client_macOS-amd64 --release ${THIS_VERSION} --platform 'darwin' --arch 'amd64' --filename ${THIS_VERSION}/ludus-client_macOS-amd64
    - keygen upload ludus-client_macOS-arm64 --release ${THIS_VERSION} --platform 'darwin' --arch 'arm64' --filename ${THIS_VERSION}/ludus-client_macOS-arm64
    - keygen upload ludus-client_windows-amd64.exe --release ${THIS_VERSION} --platform 'windows' --arch 'amd64' --filetype 'exe' --filename ${THIS_VERSION}/ludus-client_windows-amd64.exe
    - keygen upload ludus-client_windows-386.exe --release ${THIS_VERSION} --platform 'windows' --arch '386' --filetype 'exe' --filename ${THIS_VERSION}/ludus-client_windows-386.exe
    - keygen upload ludus-client_windows-arm64.exe --release ${THIS_VERSION} --platform 'windows' --arch 'arm64' --filetype 'exe' --filename ${THIS_VERSION}/ludus-client_windows-arm64.exe
    - keygen publish --release ${THIS_VERSION}
    - keygen untag --release 'latest'
    - keygen tag 'latest' --release ${THIS_VERSION}
    # We don't upload the server to keygen because it's large and there is no built in update mechanism yet
    # - export KEYGEN_PRODUCT_ID=[GUID for ludus-server]
    # - keygen upload ludus-server --release ${THIS_VERSION} --platform 'linux' --arch 'amd64' --filename ${THIS_VERSION}/ludus-server
    # - keygen publish --release ${THIS_VERSION}
    # - keygen untag --release 'latest'
    # - keygen tag 'latest' --release ${THIS_VERSION}
    - export KEYGEN_HOST=${LUDUS_ENTERPRISE_KEYGEN_HOST}
    - export KEYGEN_ACCOUNT_ID=${LUDUS_ENTERPRISE_KEYGEN_ACCOUNT_ID}
    - export KEYGEN_PRODUCT_ID=${LUDUS_ENTERPRISE_KEYGEN_PRODUCT_ID}
    - export KEYGEN_TOKEN=${LUDUS_ENTERPRISE_KEYGEN_TOKEN}
    - output=$(keygen new --channel stable --version ${CI_COMMIT_TAG} 2>&1) || { [ "$?" -eq 1 ] && [[ "$output" =~ "VERSION_TAKEN" ]] && true; }
    - keygen upload ludus-enterprise.so --release ${CI_COMMIT_TAG} --platform 'linux' --arch 'amd64' --filename ludus-enterprise_${CI_COMMIT_TAG}.so
    - keygen upload ludus-antisandbox.so --release ${CI_COMMIT_TAG} --platform 'linux' --arch 'amd64' --filename ludus-antisandbox_${CI_COMMIT_TAG}.so
    - keygen publish --release ${CI_COMMIT_TAG}

release:
  stage: release
  tags:
    - ludus-proxmox-runner
  needs:
    - build all
    - gitlab-upload
  variables:
    LUDUS_BUILD_TYPE: any-built
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ludus/${CI_COMMIT_TAG}"
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - wget "https://github.com/orhun/git-cliff/releases/download/v2.7.0/git-cliff-2.7.0-x86_64-unknown-linux-gnu.tar.gz" -O /tmp/git-cliff.tar.gz
    - tar -xvzf /tmp/git-cliff.tar.gz -C /tmp
    - sudo mv /tmp/git-cliff-*/git-cliff /usr/local/bin/
    - git-cliff -t ${CI_COMMIT_TAG} --current -o CHANGELOG.txt
    - sudo curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - sudo chmod +x /usr/local/bin/release-cli
    - 'release-cli create --name "ludus $CI_COMMIT_TAG" --description CHANGELOG.txt --tag-name $CI_COMMIT_TAG --assets-link 
      "[{\"name\":\"ludus-server-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-server-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus_${CI_COMMIT_TAG}_checksums.txt\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus_${CI_COMMIT_TAG}_checksums.txt\"},
      {\"name\":\"ludus-client_linux-amd64-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_linux-amd64-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus-client_linux-arm64-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_linux-arm64-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus-client_linux-arm-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_linux-arm-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus-client_macOS-amd64-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_macOS-amd64-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus-client_macOS-arm64-${CI_COMMIT_TAG}\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_macOS-arm64-${CI_COMMIT_TAG}\"},
      {\"name\":\"ludus-client_windows-amd64-${CI_COMMIT_TAG}.exe\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_windows-amd64-${CI_COMMIT_TAG}.exe\"},
      {\"name\":\"ludus-client_windows-386-${CI_COMMIT_TAG}.exe\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_windows-386-${CI_COMMIT_TAG}.exe\"},
      {\"name\":\"ludus-client_windows-arm64-${CI_COMMIT_TAG}.exe\", \"url\":\"${PACKAGE_REGISTRY_URL}/ludus-client_windows-arm64-${CI_COMMIT_TAG}.exe\"}]"'
