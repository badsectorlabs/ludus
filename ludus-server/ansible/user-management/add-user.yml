---
- name: Add a user to the range
  gather_facts: true
  hosts: localhost
  become: true
  tasks:
    - name: Create directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}"
        state: directory
        mode: '0770'

    - name: Create packer directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/packer"
        state: directory
        mode: '0770'

    - name: Create packer tmp directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/packer/tmp"
        state: directory
        mode: '0770'

    - name: Create ansible directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/ansible"
        state: directory
        mode: '0770'

    - name: Create .ansible directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/.ansible"
        state: directory
        mode: '0770'

    - name: Create a pool for this user (range_id)
      ansible.builtin.shell: |
        pvesh create /pools --poolid {{ user_range_id }}
      register: pool_create
      failed_when: pool_create.rc > 0 and 'already exists' not in pool_create.stderr

    - name: create client range config
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/templates/range-config.yml.j2"
        dest: "{{ ludus_users_dir }}/{{ username }}/range-config.yml"
        mode: "0600"

    # TODO: Store this in the keyring
    - name: 'Generating proxmox password for user'
      set_fact:
        user_proxmox_password: "{{ lookup('password', ludus_users_dir + '/' + username + '/proxmox_password length=20 chars=ascii_letters,digits') }}"

    - name: Add the user to the host
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /bin/bash
        groups:
          - pveusers
      register: created_user

    - name: Enable helpful aliases
      become: true
      blockinfile:
        path: /home/{{ username }}/.bashrc
        block: |
          alias ll='ls $LS_OPTIONS -lart'
        create: true

    - name: check if wg key files exists for this user
      stat:
        path: /etc/wireguard/{{ user_range_id }}-client-private-key
      register: key_stat

    - name: generate the wireguard keys
      shell: |
        wg genkey | tee /etc/wireguard/{{ user_range_id }}-client-private-key | wg pubkey > /etc/wireguard/{{ user_range_id }}-client-public-key 
      when: key_stat.stat.exists == False

    - name: Get wg server public key
      slurp:
        src: /etc/wireguard/server-public-key
      register: wg_server_public_key_slurp

    - name: Get wg client private key
      slurp:
        src: /etc/wireguard/{{ user_range_id }}-client-private-key 
      register: wg_client_private_key_slurp

    - name: Get wg client public key
      slurp:
        src: /etc/wireguard/{{ user_range_id }}-client-public-key 
      register: wg_client_public_key_slurp

    - name: Set the server and client key facts
      set_fact:
        server_public_key: "{{ wg_server_public_key_slurp['content'] | b64decode | trim }}"
        client_private_key: "{{ wg_client_private_key_slurp['content'] | b64decode | trim }}"
        client_public_key: "{{ wg_client_public_key_slurp['content'] | b64decode | trim }}"

    - name: create client wireguard config
      template:
        dest: /etc/wireguard/{{ user_range_id }}_client.conf
        src: wg_client.conf.j2
        owner: root
        group: root
        mode: '0600'

    - name: Add the user to wireguard
      ansible.builtin.blockinfile:
        path: /etc/wireguard/wg0.conf
        block: |
          [Peer]
          PublicKey = {{ client_public_key }}
          AllowedIPs = 198.51.100.{{ second_octet }}/32
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR {{ user_range_id }}"
        insertafter: EOF

    # This can be used to sync the config, but it causes a hiccup in all client's connections
    # Use the sync below instead
    # - name: Restart wireguard
    #   ansible.builtin.service:
    #     name: wg-quick@wg0
    #     state: restarted

    - name: Get the client config
      ansible.builtin.copy:
        src: "/etc/wireguard/{{ user_range_id }}_client.conf"
        dest: "{{ ludus_users_dir }}/{{ username }}/"
        mode: "0600"

    - name: Chown the user's directory
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}"
        owner: "{{ username }}"
        group: ludus
        mode: u=rwX,g=rwX,o-rwx
        recurse: true

    - name: Install collections and roles together for the user
      become: true
      become_user: ludus # since ludus is the user that runs all ansible on behalf of the user, use ludus to install the requirements
      become_method: su
      become_flags: "-l"
      # community.general.ansible_galaxy_install:
      #   type: both
      #   requirements_file: "{{ ludus_install_path }}/ansible/requirements.yml"
      # We must set the ANSIBLE_HOME correctly, so use the shell
      ansible.builtin.shell:
        cmd: |
          ANSIBLE_HOME={{ ludus_install_path }}/users/{{ username }}/.ansible ansible-galaxy install -r {{ ludus_install_path }}/ansible/requirements.yml

    - name: Sync the wireguard config (no downtime)
      ansible.builtin.shell: |
        wg syncconf wg0 <(wg-quick strip wg0)
      args:
        executable: /bin/bash

    - name: Add the vmbr interface for this user
      ansible.builtin.include_tasks: vmbr-management.yml
      vars:
        state_var: present
      loop:
        - 1

    - name: Add a portforward for this user (Enterprise)
      ansible.builtin.include_tasks: portforward-management.yml
      vars:
        port_to_forward_on_ludus_host: "{{ 51000 + second_octet }}"
        host_to_forward_to: "192.0.2.{{ 100 + second_octet }}"
        port_to_forward_to: 51820 # hardcoded to the WireGuard server port
        state_var: present
      when:
        - ludus_enterprise_license is defined and ludus_enterprise_license
        - lookup('ansible.builtin.fileglob', playbook_dir + '/portforward-management.yml') != []
        - portforward_enabled is defined
        - portforward_enabled

    - name: Add the user to proxmox
      ansible.builtin.shell:
        cmd: pveum user add {{ username }}@pam --password {{ user_proxmox_password }} -group ludus_users

    - name: Set the acls for the user on their own pool
      ansible.builtin.shell:
        cmd: pveum aclmod /pool/{{ user_range_id }} -user {{ username }}@pam -role PVEAdmin -role PVESDNAdmin

    - name: Set the acls users pool for admins
      ansible.builtin.shell:
        cmd: pveum aclmod /pool/{{ user_range_id }} -group ludus_admins -role PVEAdmin -role PVESDNAdmin

    - name: Set acls for local "/storage/local"
      ansible.builtin.shell:
        cmd: pveum aclmod /storage/local -user {{ username }}@pam -role PVEDatastoreAdmin

    - name: Add user to ludus_admins
      ansible.builtin.shell: pveum user modify {{ username }}@pam --groups ludus_admins --append
      when: user_is_admin is defined and user_is_admin
