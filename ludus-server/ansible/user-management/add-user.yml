---
- name: Add a user to the range
  gather_facts: true
  hosts: localhost
  become: true
  tasks:
    - name: Create directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}"
        state: directory
        mode: '0770'

    - name: Create packer directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/packer"
        state: directory
        mode: '0770'

    - name: Create packer tmp directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/packer/tmp"
        state: directory
        mode: '0770'

    - name: Create ansible directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/ansible"
        state: directory
        mode: '0770'

    - name: Create .ansible directory for this user
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}/.ansible"
        state: directory
        mode: '0770'

    - name: Create a pool for this user (range_id)
      ansible.builtin.shell: |
        pvesh create /pools --poolid {{ user_range_id }}
      register: pool_create
      failed_when: pool_create.rc > 0 and 'already exists' not in pool_create.stderr

    - name: create client range config
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/templates/range-config.yml.j2"
        dest: "{{ ludus_users_dir }}/{{ username }}/range-config.yml"
        mode: "0600"

    # TODO: Store this in the keyring
    - name: 'Generating proxmox password for user'
      set_fact:
        user_proxmox_password: "{{ lookup('password', ludus_users_dir + '/' + username + '/proxmox_password length=20 chars=ascii_letters,digits') }}"

    # TODO: Store this in the keyring
    - name: 'Generating ssh key for user'
      delegate_to: localhost
      become: false
      community.crypto.openssh_keypair:
        path: "{{ ludus_users_dir }}/{{ username }}/proxmox_ssh_key"

    - name: Add the user to the host
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /bin/bash
        groups:
          - pveusers
      register: created_user

    - name: Deploy SSH key for user
      authorized_key:
        user: "{{ username }}"
        key: "{{ lookup('file', ludus_users_dir + '/' + username + '/proxmox_ssh_key.pub') }}"
        state: present

    - name: Enable helpful aliases
      become: true
      blockinfile:
        path: /home/{{ username }}/.bashrc
        block: |
          alias ll='ls $LS_OPTIONS -lart'
        create: true

    - name: check if wg key files exists for this user
      stat:
        path: /etc/wireguard/{{ user_range_id }}-client-private-key
      register: key_stat

    - name: generate the wireguard keys
      shell: |
        wg genkey | tee /etc/wireguard/{{ user_range_id }}-client-private-key | wg pubkey > /etc/wireguard/{{ user_range_id }}-client-public-key 
      when: key_stat.stat.exists == False

    - name: Get wg server public key
      slurp:
        src: /etc/wireguard/server-public-key
      register: wg_server_public_key_slurp

    - name: Get wg client private key
      slurp:
        src: /etc/wireguard/{{ user_range_id }}-client-private-key 
      register: wg_client_private_key_slurp

    - name: Get wg client public key
      slurp:
        src: /etc/wireguard/{{ user_range_id }}-client-public-key 
      register: wg_client_public_key_slurp

    - name: Set the server and client key facts
      set_fact:
        server_public_key: "{{ wg_server_public_key_slurp['content'] | b64decode | trim }}"
        client_private_key: "{{ wg_client_private_key_slurp['content'] | b64decode | trim }}"
        client_public_key: "{{ wg_client_public_key_slurp['content'] | b64decode | trim }}"

    - name: create client wireguard config
      template:
        dest: /etc/wireguard/{{ user_range_id }}_client.conf
        src: wg_client.conf.j2
        owner: root
        group: root
        mode: '0600'

    - name: Add the user to wireguard
      ansible.builtin.blockinfile:
        path: /etc/wireguard/wg0.conf
        block: |
          [Peer]
          PublicKey = {{ client_public_key }}
          AllowedIPs = 198.51.100.{{ second_octet }}/32
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR {{ user_range_id }}"
        insertafter: EOF

    # This can be used to sync the config, but it causes a hiccup in all client's connections
    # Use the sync below instead
    # - name: Restart wireguard
    #   ansible.builtin.service:
    #     name: wg-quick@wg0
    #     state: restarted

    - name: Get the client config
      ansible.builtin.copy:
        src: "/etc/wireguard/{{ user_range_id }}_client.conf"
        dest: "{{ ludus_users_dir }}/{{ username }}/"
        mode: "0600"

    - name: Chown the user's directory
      ansible.builtin.file:
        path: "{{ ludus_users_dir }}/{{ username }}"
        owner: "{{ username }}"
        group: ludus
        mode: u=rwX,g=rwX,o-rwx
        recurse: true

    - name: Install collections and roles together for the user
      become: true
      become_user: ludus # since ludus is the user that runs all ansible on behalf of the user, use ludus to install the requirements
      become_method: su
      become_flags: "-l"
      # community.general.ansible_galaxy_install:
      #   type: both
      #   requirements_file: "{{ ludus_install_path }}/ansible/requirements.yml"
      # We must set the ANSIBLE_HOME correctly, so use the shell
      ansible.builtin.shell:
        cmd: |
          ANSIBLE_HOME={{ ludus_install_path }}/users/{{ username }}/.ansible ansible-galaxy install -r {{ ludus_install_path }}/ansible/requirements.yml

    - name: TMP install the lae.proxmox role that supports proxmox 8
      # We must set the ANSIBLE_HOME correctly, so use the shell
      ansible.builtin.shell:
        cmd: |
          ANSIBLE_HOME={{ ludus_install_path }}/users/{{ username }}/.ansible ansible-galaxy install https://github.com/lexxxel/ansible-role-proxmox/archive/feature/add_bookworm_and_debian_12_compatibility.tar.gz,pr-230,lae.proxmox --force

    - name: Sync the wireguard config (no downtime)
      ansible.builtin.shell: |
        wg syncconf wg0 <(wg-quick strip wg0)
      args:
        executable: /bin/bash

    - name: Add the vmbr interface for this user
      ansible.builtin.include_tasks: vmbr-management.yml
      vars:
        state_var: present
      loop:
        - 1

    - name: Allow new user to reach their range from ludus/ssh
      ansible.builtin.iptables:
        action: insert
        chain: OUTPUT
        destination: "10.{{ second_octet }}.0.0/16"
        uid_owner: "{{ created_user.uid }}"
        out_interface: "!{{ proxmox_interface }}"
        jump: ACCEPT
        comment: "Allow {{ username }} to reach their range"
        numeric: true
      when: user_is_admin is undefined or (user_is_admin is defined and not user_is_admin)

    - name: Allow admin user to reach all ranges
      ansible.builtin.iptables:
        action: insert
        chain: OUTPUT
        destination: "10.0.0.0/8"
        uid_owner: "{{ created_user.uid }}"
        out_interface: "!{{ proxmox_interface }}"
        jump: ACCEPT
        comment: "Allow admin {{ username }} to reach all ranges"
        numeric: true
      when: user_is_admin is defined and user_is_admin

    - name: Stop other users from reaching this range via wg
      ansible.builtin.iptables:
        chain: FORWARD
        in_interface: wg0
        source: "!198.51.100.{{ second_octet }}/32"
        destination: "10.{{ second_octet }}.0.0/16"
        out_interface: "!{{ proxmox_interface }}"
        jump: DROP
        comment: "Allow only {{ username }} to reach their range via wg"
        numeric: true

    - name: Save current state of the firewall to a file
      community.general.iptables_state:
        state: saved
        path: /etc/iptables/rules.v4

- name: Add user to proxmox
  hosts: localhost
  become: true
  roles:
    - role: lae.proxmox
      pve_group: "{{ proxmox_node }}"
      pve_run_system_upgrades: false
      pve_reboot_on_kernel_update: false
      pve_cluster_enabled: false
      pve_zfs_enabled: false
      pve_groups:
        - name: ludus_users
          comment: Ludus users
      pve_users:
        - name: "{{ username }}@pam"
          password: "{{ user_proxmox_password }}"
          groups: ["ludus_users"]
      pve_acls:
        - path: "/pool/{{ user_range_id }}"
          roles: ["PVEAdmin", "PVESDNAdmin"]
          users:
            - "{{ username }}@pam"
        - path: "/pool/{{ user_range_id }}"
          roles: ["PVEAdmin", "PVESDNAdmin"]
          groups:
            - ludus_admins
        - path: "/storage/local"
          roles: ["PVEDatastoreAdmin"]
          users:
            - "{{ username }}@pam"
  tasks:
    - name: Add user to ludus_admins
      ansible.builtin.shell: pveum user modify {{ username }}@pam --groups ludus_admins --append
      when: user_is_admin is defined and user_is_admin
