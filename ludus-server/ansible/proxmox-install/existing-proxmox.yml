- name: Configure Proxmox Stage 1
  hosts: localhost
  pre_tasks:
    - name: Set install path
      ansible.builtin.set_fact:
        ludus_install_path: "{{ install_path | default('/opt/ludus') }}"
  vars:
    pve_interface: "{{ proxmox_interface | default(ansible_default_ipv4.interface) }}"
  serial: 1
  tasks:
    - name: Setup ludus-install-status script
      ansible.builtin.template:
        src: ludus-install-status.sh.j2
        dest: /usr/local/bin/ludus-install-status
        mode: '0755'

    - name: Install bridge-utils, git, python3-pip, dnsmasq, jq, and other required packages
      ansible.builtin.apt:
        name:
          - bridge-utils
          - git
          - python3-pip
          - jq
          - dnsmasq
          - curl
          - gpg-agent
          - dbus
          - dbus-user-session
          - vim
          - iptables-persistent
          - sshpass # for ansible provisioner in packer
          - swapspace # helps with machines with low RAM (32GB)
        state: present
        update_cache: true

    # Jeff Geerling approved: https://github.com/geerlingguy/ansible-role-pip/pull/58
    - name: Remove python externally-managed file to allow pip to run via ansible
      ansible.builtin.file:
        path: /usr/lib/python3.11/EXTERNALLY-MANAGED
        state: absent

    - name: Install required python packages (for ansible/proxmox interoperability)
      ansible.builtin.pip:
        name:
          - proxmoxer
          - requests
          - netaddr
          - pywinrm
          - dnspython
          - jmespath

    - name: Ensure /etc/ansible directory exists
      ansible.builtin.file:
        path: /etc/ansible
        state: directory
        mode: '0755'

    - name: Set configuration in /etc/ansible/ansible.cfg
      ansible.builtin.copy:
        dest: /etc/ansible/ansible.cfg
        content: |
          [defaults]
          no_target_syslog = True
          timeout = 60
        mode: '0644'

    - name: Configure dnsmasq (part 1) - setup base config
      ansible.builtin.template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf

    - name: Configure dnsmasq (part 2) - setup interface config
      ansible.builtin.template:
        src: dnsmasq-interface.conf.j2
        dest: "/etc/dnsmasq.d/dnsmasq-{{ pve_interface }}.conf"

    - name: Configure dnsmasq (part 3) - enable service
      ansible.builtin.service:
        name: dnsmasq
        enabled: true

    - name: Add 'ludus' interface
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        marker: "# LUDUS INTERFACE {mark}"
        block: |
          auto {{ ludus_nat_interface }}
          iface {{ ludus_nat_interface }} inet static
              address 192.0.2.254/24
              bridge-ports none
              bridge-stp off
              bridge-fd 0
              bridge-vlan-aware yes
              bridge-vids 2-4094
              post-up echo 1 > /proc/sys/net/ipv4/ip_forward
              post-up   iptables -t nat -A POSTROUTING -s '192.0.2.254/24' -o {{ pve_interface }} -j MASQUERADE
              post-down iptables -t nat -D POSTROUTING -s '192.0.2.254/24' -o {{ pve_interface }} -j MASQUERADE
        state: present
      register: interfaces_status

    - name: Enable new ludus NAT interface
      ansible.builtin.shell: ADDRFAM=inet ifup {{ ludus_nat_interface }}
      when: interfaces_status is changed

- name: Configure Proxmox Stage 2
  hosts: localhost
  pre_tasks:
    - name: Set install path
      ansible.builtin.set_fact:
        ludus_install_path: "{{ install_path | default('/opt/ludus') }}"
  roles:
    - role: geerlingguy.packer
      packer_version: "1.9.4"
    - role: lae.proxmox
      pve_group: "{{ proxmox_node }}"
      pve_run_system_upgrades: false
      pve_run_proxmox_upgrades: false
      pve_check_for_kernel_update: false
      pve_reboot_on_kernel_update: false
      pve_cluster_enabled: false
      pve_zfs_enabled: false
      pve_ceph_enabled: false
      pve_remove_subscription_warning: false
      pve_remove_old_kernels: false
      pve_roles:
        - name: ResourceAudit
          privileges:
            - "Sys.Audit"
            - "Datastore.Audit"
        - name: DatastoreUser
          privileges:
            - "Datastore.AllocateSpace"
            - "Datastore.AllocateTemplate"
            - "Datastore.Audit"
        - name: AccessNetwork
          privileges:
            - "Sys.AccessNetwork"
      pve_groups:
        - name: ludus_users
          comment: Ludus users
        - name: ludus_admins
          comment: Ludus admins
  tasks:
    # These have to be present for the pve_acls to work
    - name: Configure Proxmox pools (SHARED)
      proxmox_pool:
        name: SHARED
        state: present
        comment: "Templates shared with all Ludus users"

    - name: Configure Proxmox pools (ADMIN)
      proxmox_pool:
        name: ADMIN
        state: present
        comment: "VMs managed by the Ludus admin"

- name: Configure Proxmox Stage 3
  hosts: localhost
  roles:
    - role: geerlingguy.packer
      packer_version: "1.9.4"
    - role: lae.proxmox
      pve_group: "{{ proxmox_node }}"
      pve_run_system_upgrades: false
      pve_run_proxmox_upgrades: false
      pve_check_for_kernel_update: false
      pve_reboot_on_kernel_update: false
      pve_cluster_enabled: false
      pve_zfs_enabled: false
      pve_ceph_enabled: false
      pve_remove_subscription_warning: false
      pve_remove_old_kernels: false
      pve_acls:
        - path: /pool/SHARED
          roles: ["PVEVMAdmin", "PVEPoolUser", "PVESDNAdmin"] # ["PVETemplateUser"] only allows using templates, not creating
          groups: ["ludus_users"]
        - path: /sdn/zones/localnetwork
          roles: ["PVESDNUser"]
          groups: ["ludus_users"]
        - path: /pool/ADMIN
          roles: ["PVEVMAdmin", "PVESDNAdmin", "PVEPoolAdmin"]
          groups: ["ludus_admins"]
        - path: /
          roles: ["ResourceAudit"]
          groups: ["ludus_users"]
        - path: /nodes/{{ inventory_hostname }} # Required as the AccessNetwork role is more specific than the ResourceAudit role against '/' so we need this as well
          roles: ["ResourceAudit"]
          groups: ["ludus_users"]           
        - path: "/storage/{{ proxmox_vm_storage_pool }}"
          roles: ["PVEDatastoreAdmin"]
          groups:
            - ludus_admins
        - path: "/storage/{{ proxmox_iso_storage_pool }}"
          roles: ["PVEDatastoreAdmin"]
          groups:
            - ludus_admins
        - path: "/storage/{{ proxmox_vm_storage_pool }}"
          roles: ["DatastoreUser"]
          groups:
            - ludus_users
        - path: "/storage/{{ proxmox_iso_storage_pool }}"
          roles: ["DatastoreUser"]
          groups:
            - ludus_users
        - path: "/nodes/{{ inventory_hostname }}"
          roles: ["AccessNetwork"]
          groups:
            - ludus_users
  vars:
    port: "51820"
    server_cidr: "198.51.100.1/24"
  tasks:
    - name: Install proxmox and ansible packer plugin
      ansible.builtin.shell:
        PACKER_PLUGIN_PATH={{ ludus_install_path }}/resources/packer/plugins packer plugins install github.com/hashicorp/proxmox v1.1.8;
        PACKER_PLUGIN_PATH={{ ludus_install_path }}/resources/packer/plugins packer plugins install github.com/hashicorp/ansible v1.1.1
      register: packer_plugin_install

    - name: Ensure group "pveusers" exists
      ansible.builtin.group:
        name: pveusers
        state: present

    - name: Setup WireGuard VPN server
      ansible.builtin.include_tasks: tasks/setup-wg.yml

    - name: Ensure group "ludus" exists
      ansible.builtin.group:
        name: ludus
        state: present

    - name: Create the ludus user
      ansible.builtin.user:
        name: ludus
        shell: /bin/bash
        groups:
          - ludus
          - www-data # required to read the proxmox SSL cert
        append: true
      register: created_user

    - name: Create the ludus users directory
      ansible.builtin.file:
        path: "{{ ludus_install_path }}/users"
        state: directory

    - name: Chown install directory to ludus user
      ansible.builtin.file:
        dest: "{{ ludus_install_path }}"
        owner: ludus
        group: ludus
        recurse: true

    - name: Create the ludus root user directory
      ansible.builtin.file:
        path: "{{ ludus_install_path }}/users/root"
        state: directory

    - name: Install collections and roles together for the root user (used to create other users)
      # community.general.ansible_galaxy_install:
      #   type: both
      #   requirements_file: "{{ ludus_install_path }}/ansible/requirements.yml"
      # We must set the ANSIBLE_HOME correctly, so use the shell
      ansible.builtin.shell:
        cmd: |
          ANSIBLE_HOME={{ ludus_install_path }}/users/root/.ansible ansible-galaxy install -r {{ ludus_install_path }}/ansible/requirements.yml

    - name: Create systemd service file for ludus admin
      ansible.builtin.template:
        src: ludus-admin.service.j2
        dest: "/etc/systemd/system/ludus-admin.service"
        owner: root
        group: root
        mode: '0644'

    - name: Start the ludus admin service
      ansible.builtin.service:
        name: ludus-admin.service
        state: started
        enabled: true
        daemon_reload: true

    - name: Create systemd service file for ludus
      ansible.builtin.template:
        src: ludus.service.j2
        dest: "/etc/systemd/system/ludus.service"
        owner: root
        group: root
        mode: '0644'

    - name: Start the ludus service
      ansible.builtin.service:
        name: ludus
        state: started
        enabled: true
        daemon_reload: true
    
    - name: Restart dnsmasq
      ansible.builtin.service:
        name: dnsmasq
        state: restarted

    - name: Drop a file to indicate stage 3 is complete
      ansible.builtin.file:
        path: "{{ ludus_install_path }}/install/.stage-3-complete"
        state: touch
        mode: '0644'

    - name: Alert
      ansible.builtin.pause:
        prompt: |
          Ludus install complete.
        seconds: 1
