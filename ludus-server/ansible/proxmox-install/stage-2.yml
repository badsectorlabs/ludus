- name: Stage 2
  hosts: localhost
  pre_tasks:
    - name: Check if the stage-2 file exists
      ansible.builtin.stat:
        path: "{{ ludus_install_path }}/install/.stage-2-complete"
      register: stat_result

    - name: End play if completed
      ansible.builtin.meta: end_play
      when: stat_result.stat.exists

    - name: Try to upgrade the system
      block:
        - name: Perform system upgrades
          ansible.builtin.apt:
            update_cache: true
            cache_valid_time: 3600
            upgrade: dist
          retries: 2
          register: _system_upgrade
          until: _system_upgrade is succeeded
      rescue:
        - name: Check error 1
          ansible.builtin.pause:
            prompt: |
              "GRUB auto-install failed, attempting automatic recoverty. Run `dpkg --configure grub-pc` to manually fix this error."
            seconds: 1
          when: '"You must correct your GRUB install devices before proceeding" in _system_upgrade.stdout'
        
        - name: Check for sda
          ansible.builtin.shell: |
            df | egrep '/$' | grep sda
          register: sda_check
          ignore_errors: true
          when: '"You must correct your GRUB install devices before proceeding" in _system_upgrade.stdout'

        - name: Fail if sda is not the disk
          ansible.builtin.fail:
            msg: "Unable to determine boot disk, Run `dpkg --configure grub-pc` to manually fix this error."
          when: sda_check.failed is true and "You must correct your GRUB install devices before proceeding" in _system_upgrade.stdout 

        - name: Select SDA for grub-pc
          ansible.builtin.shell: |
            echo "grub-pc grub-pc/install_devices multiselect /dev/sda" | debconf-set-selections && dpkg --configure grub-pc
          when: sda_check.failed is false and "You must correct your GRUB install devices before proceeding" in _system_upgrade.stdout

        - name: Check error 2
          ansible.builtin.debug:
            msg: "dpkg is stuck, going to reboot"
          when: '"Another instance of this program is already running." in _system_upgrade.stdout'
        
        - name: Alert
          ansible.builtin.pause:
            prompt: |
              Rebooting. Ludus install will continue automatically on reboot.
            seconds: 1
          when: '"Another instance of this program is already running." in _system_upgrade.stdout'

        - name: Reboot for for dpkg
          ansible.builtin.shell: "sleep 5 && /usr/sbin/shutdown -r now 'dpkg is stuck, rebooting'"
          async: 1
          poll: 0
          when: '"Another instance of this program is already running." in _system_upgrade.stdout'

        - name: Pause for reboot
          ansible.builtin.pause:
            seconds: 60
          when: '"Another instance of this program is already running." in _system_upgrade.stdout'

    - name: Update install progress
      ansible.builtin.include_tasks: tasks/update-install-progress.yml
      vars:
        install_message: |-2
              Ludus is installing and will reboot 1 more time.

              ████████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ 40%

  roles:
    - role: lae.proxmox
      pve_group: "{{ proxmox_node }}"
      pve_run_system_upgrades: false
      pve_reboot_on_kernel_update: false # Since we are running ansible on localhost, we will do this manually
      pve_cluster_enabled: false
      pve_zfs_enabled: false
      pve_roles:
        - name: ResourceAudit
          privileges:
            - "Sys.Audit"
            - "Datastore.Audit"
        - name: DatastoreUser
          privileges:
            - "Datastore.AllocateSpace"
            - "Datastore.AllocateTemplate"
            - "Datastore.Audit"
        - name: AccessNetwork
          privileges:
            - "Sys.AccessNetwork"
      pve_groups:
        - name: ludus_users
          comment: Ludus users
        - name: ludus_admins
          comment: Ludus admins
  post_tasks:
    - name: Disable the pvebanner service
      ansible.builtin.service:
        name: pvebanner.service
        enabled: false

    - name: Update install progress
      ansible.builtin.include_tasks: tasks/update-install-progress.yml
      vars:
        install_message: |-2
              Ludus is installing and will reboot 1 more time.

              ██████████████████████████████████████████░░░░░░░░░░░░░░░░░░ 70%

    - name: Update install progress (for next boot)
      ansible.builtin.include_tasks: tasks/update-install-progress.yml
      vars:
        no_bounce_tty: true # Don't bounce, just set up for the next boot by decrementing the reboot message
        install_message: |-2
              Ludus is installing and will not reboot again.

              ██████████████████████████████████████████░░░░░░░░░░░░░░░░░░ 70%

    - name: Disable no subscription warning
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          echo "DPkg::Post-Invoke { \"dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib\.js$'; if [ \$? -eq 1 ]; then { echo 'Removing subscription nag from UI...'; sed -i '/data.status/{s/\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; }; fi\"; };" >/etc/apt/apt.conf.d/no-nag-script
          apt --reinstall install proxmox-widget-toolkit &>/dev/null

    - name: Drop a file to indicate stage 2 is complete
      ansible.builtin.file:
        path: "{{ ludus_install_path }}/install/.stage-2-complete"
        state: touch

    - name: Alert
      ansible.builtin.pause:
        prompt: |
          Rebooting after stage 2. Ludus install will continue automatically on reboot.
        seconds: 10

    - name: Reboot into the PVE kernel
      ansible.builtin.shell: "sleep 5 && /usr/sbin/shutdown -r now 'PVE kernel installed, rebooting'"
      async: 1
      poll: 0

    - name: Pause for reboot
      ansible.builtin.pause:
        seconds: 60
