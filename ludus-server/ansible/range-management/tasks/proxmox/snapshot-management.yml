- name: Get time of last snapshot
  ansible.builtin.shell:
    cmd: |
      curl -s -k -b "PVEAuthCookie={{ hostvars['localhost']['proxmox_ticket'] }}" "https://127.0.0.1:8006/api2/json/nodes/{{ hostvars['localhost']['node_name'] }}/qemu/{{ item }}/snapshot/{{ snapshot_name }}/config" | jq '.[] | .snaptime'
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vmids_to_snapshot'] }}"
  register: snapshot_times
  ignore_errors: true
  when: snapshot_action == "take_snapshot"

- name: Remove previous clean snapshot
  community.general.proxmox_snap:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    vmid: "{{ item }}"
    state: absent
    snapname: "{{ snapshot_name }}"
    timeout: 300
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vmids_to_snapshot'] }}"
  loop_control:
    index_var: index
  when:
    - snapshot_action == "take_snapshot"
    # Only care about previous snapshots if the date detection returned successfully
    - snapshot_times.results[index].rc == 0
    # Subtract the time of snapshot from the current time and see if it exceeds the threshold for staleness, if it does, remove the snapshot
    - (((ansible_date_time.epoch | int) - (snapshot_times.results[index].stdout | int)) / 3600 | int > defaults.stale_hours)
  retries: 5
  delay: 3
  register: result
  until: result is not failed

- name: Create new clean snapshot
  community.general.proxmox_snap:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    vmid: "{{ item }}"
    state: present
    snapname: "{{ snapshot_name }}"
    description: "Automated snapshot created by ludus at {{ ansible_date_time.iso8601 }}"
    vmstate: "{{ include_RAM }}"
    timeout: 600
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vmids_to_snapshot'] }}"
  loop_control:
    index_var: index
  when:
    - snapshot_action == "take_snapshot"
    # Force a new snapshot if the previous snapshot time detection failed
    - (((ansible_date_time.epoch | int) - (snapshot_times.results[index].stdout | int)) / 3600 | int > defaults.stale_hours)
  retries: 5
  delay: 3
  register: result
  until: result is not failed

##########
# Revert #
##########
- name: Save the state of the VM before revert (in the event the snaphshot was taken without RAM and we need to start it)
  ansible.builtin.set_fact:
    # Set a key/value where the key is the vm_id and the value is the current state of the VM
    vm_states: "{{ vm_states | default({}) | combine({hostvars[item].proxmox_vmid: hostvars[item].proxmox_status}) }}"
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vm_names_to_snapshot'] }}"
  when: snapshot_action == "revert_snapshot"

- name: Revert VM to snapshot
  community.general.proxmox_snap:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    vmid: "{{ item }}"
    state: rollback
    snapname: "{{ snapshot_name }}"
    timeout: 300
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vmids_to_snapshot'] }}"
  when: snapshot_action == "revert_snapshot"
  register: revert_to_snapshot
  failed_when: revert_to_snapshot.changed == false or ('Too many redirections' in revert_to_snapshot.msg)
  ignore_errors: "{{ allow_errors | default(false) }}"

- name: Start the VMs
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    node: "{{ node_name }}"
    vmid: "{{ item }}"
    state: started
    timeout: 300
  loop: "{{ hostvars[router.vm_name | default(range_id + '-router-debian11-x64')]['vmids_to_snapshot'] }}"
  # Only start the VM if it was started before the revert
  when: snapshot_action == "revert_snapshot" and vm_states[item] == 'running'
  # But sometimes it fails anyway?
  retries: 3
  delay: 5
  register: result
  until: result is not failed
