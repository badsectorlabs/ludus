- name: Print
  ansible.builtin.debug:
    msg: "{{ item }}"

- name: Set src for simple rule (all)
  ansible.builtin.set_fact:
    src: "10.{{ range_second_octet }}.0.0/16"
  when:
    - item.ip_last_octet_src is undefined
    - item.vlan_src | string == "all"

- name: Set src for simple rule (public)
  ansible.builtin.set_fact:
    src: "! 10.{{ range_second_octet }}.0.0/16"
  when:
    - item.ip_last_octet_src is undefined
    - item.vlan_src | string == "public"

- name: Set src for simple rule (wireguard)
  ansible.builtin.set_fact:
    src: "198.51.100.0/24"
  when:
    - item.ip_last_octet_src is undefined
    - item.vlan_src | string == "wireguard"

- name: Set src for simple rule (vlan)
  ansible.builtin.set_fact:
    src: "10.{{ range_second_octet }}.{{ item.vlan_src }}.0/24"
  when:
    - item.ip_last_octet_src is undefined
    - item.vlan_src | string != "all"
    - item.vlan_src | string != "public"
    - item.vlan_src | string != "wireguard"

- name: Set src for an IP rule (vlan)
  ansible.builtin.set_fact:
    src: 10.{{ range_second_octet }}.{{ item.vlan_src }}.{{ item.ip_last_octet_src }}
  when:
    - item.ip_last_octet_src is defined
    - '"-" not in (item.ip_last_octet_src | string)'
    - item.vlan_src | string != "wireguard"

- name: Set src for an IP rule (vlan range)
  ansible.builtin.set_fact:
    src: 10.{{ range_second_octet }}.{{ item.vlan_src }}.{{ item.ip_last_octet_src.split('-')[0] }}-10.{{ range_second_octet }}.{{ item.vlan_src }}.{{ item.ip_last_octet_src.split('-')[1] }}
  when:
    - item.ip_last_octet_src is defined
    - '"-" in (item.ip_last_octet_src | string)'
    - item.vlan_src | string != "wireguard"

- name: Set the src for a wireguard rule with IP
  ansible.builtin.set_fact:
    src: "198.51.100.{{ item.ip_last_octet_src }}"
  when:
    - item.ip_last_octet_src is defined
    - '"-" not in (item.ip_last_octet_src | string)'
    - item.vlan_src | string == "wireguard"

- name: Set the src for a wireguard rule with IP range
  ansible.builtin.set_fact:
    src: "198.51.100.{{ item.ip_last_octet_src.split('-')[0] }}-198.51.100.{{ item.ip_last_octet_src.split('-')[1] }}"
  when:
    - item.ip_last_octet_src is defined
    - '"-" in (item.ip_last_octet_src | string)'
    - item.vlan_src | string == "wireguard"

- name: Set dst for simple rule (all)
  ansible.builtin.set_fact:
    dst: "10.{{ range_second_octet }}.0.0/16"
  when:
    - item.ip_last_octet_dst is undefined
    - item.vlan_dst | string == "all"

- name: Set dst for simple rule (public)
  ansible.builtin.set_fact:
    dst: "! 10.{{ range_second_octet }}.0.0/16"
  when:
    - item.ip_last_octet_dst is undefined
    - item.vlan_dst | string == "public"

- name: Set dst for simple rule (wireguard)
  ansible.builtin.set_fact:
    dst: "198.51.100.0/24"
  when:
    - item.ip_last_octet_dst is undefined
    - item.vlan_dst | string == "wireguard"

- name: Set dst for simple rule (vlan)
  ansible.builtin.set_fact:
    dst: "10.{{ range_second_octet }}.{{ item.vlan_dst }}.0/24"
  when:
    - item.ip_last_octet_dst is undefined
    - item.vlan_dst | string != "all"
    - item.vlan_dst | string != "public"
    - item.vlan_dst | string != "wireguard"

- name: Set dst for an IP rule
  ansible.builtin.set_fact:
    dst: 10.{{ range_second_octet }}.{{ item.vlan_dst }}.{{ item.ip_last_octet_dst }}
  when:
    - item.ip_last_octet_dst is defined
    - '"-" not in (item.ip_last_octet_dst | string)'
    - item.vlan_dst | string != "wireguard"

- name: Set dst for an IP rule (range)
  ansible.builtin.set_fact:
    dst: 10.{{ range_second_octet }}.{{ item.vlan_dst }}.{{ item.ip_last_octet_dst.split('-')[0] }}-10.{{ range_second_octet }}.{{ item.vlan_dst }}.{{ item.ip_last_octet_dst.split('-')[1] }}
  when:
    - item.ip_last_octet_dst is defined
    - '"-" in (item.ip_last_octet_dst | string)'
    - item.vlan_dst | string != "wireguard"

- name: Set the dst for a wireguard rule with IP
  ansible.builtin.set_fact:
    dst: "198.51.100.{{ item.ip_last_octet_dst }}"
  when:
    - item.ip_last_octet_dst is defined
    - '"-" not in (item.ip_last_octet_dst | string)'
    - item.vlan_dst | string == "wireguard"

- name: Set the dst for a wireguard rule with IP range
  ansible.builtin.set_fact:
    dst: "198.51.100.{{ item.ip_last_octet_dst.split('-')[0] }}-198.51.100.{{ item.ip_last_octet_dst.split('-')[1] }}"
  when:
    - item.ip_last_octet_dst is defined
    - '"-" in (item.ip_last_octet_dst | string)'
    - item.vlan_dst | string == "wireguard"

# Handle all cases for protocol (undefined, 'all', or a string)
- name: Set protocol (undefined or all)
  ansible.builtin.set_fact:
    proto: "all"
  when:
    - item.protocol is undefined or (item.protocol | string) == "all"

- name: Set protocol (defined and not all)
  ansible.builtin.set_fact:
    proto: "{{ item.protocol }}"
  when:
    - item.protocol is defined
    - (item.protocol | string) != "all"

- name: Debug
  ansible.builtin.debug:
    msg: "src: {{ src }}    dst: {{ dst }}     proto: {{ proto }}    ports: {{ item.ports | default('undefined') }}    action: {{ item.action }}"

- name: Check that ports are only set with supported protocols
  ansible.builtin.assert:
    that:
      - item.protocol == 'tcp' or item.protocol == 'udp' or item.protocol == 'dccp' or item.protocol == 'sctp'
    fail_msg: "You can only define ports with protocols: tcp, udp, dccp, or sctp"
    success_msg: "Protocol and ports are compatible"
  when:
    - item.ports is defined
    - item.ports | string != 'all'

- name: Apply a standard firewall rule
  ansible.builtin.iptables:
    chain: "{{ 'LUDUS_DEFAULTS' if (item.vlan_src | string == 'wireguard' or item.vlan_dst | string == 'wireguard') else 'LUDUS_USER_RULES' }}"
    source: "{{ src }}"
    destination: "{{ dst }}"
    protocol: "{{ proto }}"
    destination_port: "{{ item.ports if (item.ports is defined and (item.ports | string) != 'all') else omit }}"
    jump: "{{ item.action }}"
    state: present
    action: insert
    comment: "User Rule: {{ item.name }}"
    numeric: true
  when: >
      (item.ip_last_octet_src is undefined and item.ip_last_octet_dst is undefined) or
      (item.ip_last_octet_dst is undefined and item.ip_last_octet_src is defined and "-" not in (item.ip_last_octet_src | string)) or
      (item.ip_last_octet_src is undefined and item.ip_last_octet_dst is defined and "-" not in (item.ip_last_octet_dst | string)) or
      (item.ip_last_octet_src is defined and "-" not in (item.ip_last_octet_src | string) and item.ip_last_octet_dst is defined and "-" not in (item.ip_last_octet_dst | string))

- name: Apply a src range firewall rule
  ansible.builtin.iptables:
    chain: "{{ 'LUDUS_DEFAULTS' if (item.vlan_src | string == 'wireguard' or item.vlan_dst | string == 'wireguard') else 'LUDUS_USER_RULES' }}"
    src_range: "{{ src }}"
    destination: "{{ dst }}"
    protocol: "{{ proto }}"
    destination_port: "{{ item.ports if (item.ports is defined and (item.ports | string) != 'all') else omit }}"
    jump: "{{ item.action }}"
    state: present
    action: insert
    comment: "User Rule: {{ item.name }}"
    numeric: true
  when:
    - item.ip_last_octet_src is defined
    - '"-" in (item.ip_last_octet_src | string)'
    - (item.ip_last_octet_dst is undefined or item.ip_last_octet_dst is defined and "-" not in (item.ip_last_octet_dst | string))

- name: Apply a dst range firewall rule
  ansible.builtin.iptables:
    chain: "{{ 'LUDUS_DEFAULTS' if (item.vlan_src | string == 'wireguard' or item.vlan_dst | string == 'wireguard') else 'LUDUS_USER_RULES' }}"
    source: "{{ src }}"
    dst_range: "{{ dst }}"
    protocol: "{{ proto }}"
    destination_port: "{{ item.ports if (item.ports is defined and (item.ports | string) != 'all') else omit }}"
    jump: "{{ item.action }}"
    state: present
    action: insert
    comment: "User Rule: {{ item.name }}"
    numeric: true
  when:
    - item.ip_last_octet_dst is defined
    - '"-" in (item.ip_last_octet_dst| string)'
    - (item.ip_last_octet_src is undefined or item.ip_last_octet_src is defined and "-" not in (item.ip_last_octet_src | string))

- name: Apply a src and dst range firewall rule
  ansible.builtin.iptables:
    chain: "{{ 'LUDUS_DEFAULTS' if (item.vlan_src | string == 'wireguard' or item.vlan_dst | string == 'wireguard') else 'LUDUS_USER_RULES' }}"
    src_range: "{{ src }}"
    dst_range: "{{ dst }}"
    protocol: "{{ proto }}"
    destination_port: "{{ item.ports if (item.ports is defined and (item.ports | string) != 'all') else omit }}"
    jump: "{{ item.action }}"
    state: present
    action: insert
    comment: "User Rule: {{ item.name }}"
    numeric: true
  when:
    - item.ip_last_octet_src is defined
    - item.ip_last_octet_dst is defined
    - '"-" in (item.ip_last_octet_src | string)'
    - '"-" in (item.ip_last_octet_dst | string)'
