# ==========================================================
# Block
# ==========================================================
# Since the FORWARD table policy is DROP, this will block all traffic that isn't explicitly allowed by a rule
- name: Remove the default external rule
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "! 10.{{ range_second_octet }}.0.0/16"
    protocol: all
    jump: "{{ network.external_default | default('ACCEPT') }}"
    state: absent
    comment: "User Default: External Rule"
    numeric: true
  when: testing_action == "block"

- name: Add a rule for each non-blocked VM in the LUDUS_TESTING chain
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    source: "{{ item }}"
    destination: "! 10.{{ range_second_octet }}.0.0/16"
    protocol: all
    jump: ACCEPT
    state: present
    action: append
    comment: "Ludus Testing: Allow VM {{ item }}"
    numeric: true
  loop: "{{ action_ips | default([]) }}"
  when: testing_action == "block"

- name: Reset the conntrack entries to prevent previously allowed traffic to continue
  ansible.builtin.shell: conntrack -F
  async: 5 # Becuase this resets the conntrack entries, ansible will hang unless we run it async
  poll: 1
  when: testing_action == "block"

# ==========================================================
# Allow
# ==========================================================
- name: Replace the default external rule
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "! 10.{{ range_second_octet }}.0.0/16"
    protocol: all
    jump: "{{ network.external_default | default('ACCEPT') }}"
    state: present
    action: append
    comment: "User Default: External Rule"
    numeric: true
  when: testing_action == "allow"

- name: Flush the LUDUS_TESTING table to remove any user defined rules now that testing is done
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    flush: true
  when: testing_action == "allow"

# ==========================================================
# Open
# ==========================================================
- name: Open the firewall for a single IP
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ ip }}"
    protocol: all
    jump: ACCEPT
    state: present
    action: append
    comment: "Ludus Testing: Allow specific IP - {{ ip }}"
    numeric: true
  when: testing_action == "open"

# ==========================================================
# Close
# ==========================================================
- name: Close the firewall for a single IP
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ ip }}"
    protocol: all
    jump: ACCEPT
    state: absent
    action: append
    comment: "Ludus Testing: Allow specific IP - {{ ip }}"
    numeric: true
  when: testing_action == "close"

- name: Reset the conntrack entries to prevent previously allowed traffic to continue
  ansible.builtin.shell: conntrack -F
  async: 5 # Becuase this resets the conntrack entries, ansible will hang unless we run it async
  poll: 1
  when: testing_action == "close"

# ==========================================================
# Allow Domain
# ==========================================================
- name: Allow IPs for a domain
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ domainIP }}" # set as an extra var by Go
    protocol: all
    jump: ACCEPT
    state: present
    action: append
    comment: "Ludus Testing: Allow {{ domain }}"
    numeric: true
  when: testing_action == "allow-domain"

# ==========================================================
# Deny Domain
# ==========================================================
- name: Deny IPs for a domain
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ domainIP }}" # set as an extra var by Go
    protocol: all
    jump: ACCEPT
    state: absent
    comment: "Ludus Testing: Allow {{ domain }}"
    numeric: true
  when: testing_action == "deny-domain"

- name: Reset the conntrack entries to prevent previously allowed traffic to continue
  ansible.builtin.shell: conntrack -F
  async: 5 # Becuase this resets the conntrack entries, ansible will hang unless we run it async
  poll: 1
  when: testing_action == "deny-domain"

# ==========================================================
# Persist!
# ==========================================================
- name: Save current state of the firewall to a file
  community.general.iptables_state:
    state: saved
    path: /etc/iptables/rules.v4
