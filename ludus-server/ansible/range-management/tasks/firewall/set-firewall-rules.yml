- name: Set the policy for the FORWARD chain to DROP
  ansible.builtin.iptables:
    chain: FORWARD
    policy: DROP

- name: Create the LUDUS_DEFAULTS chain
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    chain_management: true

- name: Create the LUDUS_USER_RULES chain
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    chain_management: true

- name: Create the LUDUS_TESTING chain
  ansible.builtin.iptables:
    chain: LUDUS_TESTING
    chain_management: true

- name: Flush the LUDUS_USER_RULES table to remove any user defined rules to prevent old rules from lingering
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    flush: true

- name: Flush the LUDUS_DEFAULTS table to remove any user defined rules to prevent old rules from lingering
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    flush: true

- name: Flush the INPUT to prevent locking ourselves out during rule setup
  ansible.builtin.iptables:
    chain: INPUT
    flush: true

- name: Get the VM id of the router via Proxmox API
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ hostvars['localhost']['proxmox_ticket'] }}" https://127.0.0.1:8006/api2/json/cluster/resources 'type:vm' | jq '.[] | .[] | select(.name=="{{ router.vm_name | default(range_id + '-router-debian11-x64') }}").vmid'
  delegate_to: localhost
  become: false
  register: router_id_command
  when: router_vm_id is not defined

- name: Set the router_vm_id from API lookup
  ansible.builtin.set_fact:
    router_vm_id: "{{ router_id_command.stdout }}"
  when: router_vm_id is not defined

- name: Get the interface with a 192.0.2.x ip (WAN)
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ hostvars['localhost']['proxmox_ticket'] }}" "https://127.0.0.1:8006/api2/json/nodes/{{ hostvars['localhost']['node_name'] }}/qemu/{{ router_vm_id }}/agent/network-get-interfaces" | jq -r '.[] | .result[] | select(."ip-addresses"[]?."ip-address"|test("192.0.2")).name'
  delegate_to: localhost
  become: false
  register: wan_interface_command

- name: Set the router_external_interface variable
  ansible.builtin.set_fact:
    router_external_interface: "{{ wan_interface_command.stdout }}"

- name: Deny all other traffic from the external interface
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    chain_management: true
    in_interface: "{{ router_external_interface }}"
    protocol: all
    jump: REJECT
    state: present
    action: insert
    comment: "Default: Deny traffic in on external interface"
    numeric: true

- name: Allow the user's WireGuard IP to hit this router from the outside
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "198.51.100.{{ range_second_octet }}"
    in_interface: "{{ router_external_interface }}"
    protocol: all
    jump: ACCEPT
    state: present
    action: insert
    comment: "Default: WireGuard Client access rule"
    numeric: true

# Somehow the access_grants_array is being set to NoneType, so we need to set it to an empty list if it is NoneType
# which prevents the next task's loop from failing with a template error, despite being set to an empty array by default...
- name: Set range_access_grants_array from access_grants_array
  ansible.builtin.set_fact:
    range_access_grants_array: "{{ access_grants_array | default([]) }}"

# Make sure any existing access grants are set up (in the event the range is destroyed and then rebuilt after an access grant)
- name: Modify router firewall to allow WireGuard IP's for access grants to this range
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "198.51.100.{{ item.second_octet }}"
    in_interface: "{{ router_external_interface }}"
    protocol: all
    jump: ACCEPT
    state: present
    action: insert
    comment: "Access Grant: WireGuard client access rule for {{ item.username }}"
    numeric: true
  loop: "{{ range_access_grants_array | default([]) | list }}"

- name: Set the default WireGuard subnet rule
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "198.51.100.0/24"
    protocol: all
    jump: "{{ network.wireguard_vlan_default | default('ACCEPT') }}"
    state: present
    action: insert
    comment: "User Default: WireGuard Subnet Rule"
    numeric: true

- name: Set the default allow related/established out to the user's WireGuard IP
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    protocol: all
    ctstate:
      - RELATED
      - ESTABLISHED
    jump: ACCEPT
    state: present
    action: insert
    comment: "Default: allow related/established rule"
    numeric: true
    rule_num: 1

- name: Set the default external rule
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "! 10.{{ range_second_octet }}.0.0/16"
    protocol: all
    jump: "{{ network.external_default | default('ACCEPT') }}"
    state: present
    action: insert
    comment: "User Default: External Rule"
    numeric: true
  # Don't set the default external rule if we are testing and this is a forced deploy
  when: not ludus_testing_enabled

- name: Set the default inter-VLAN rule
  ansible.builtin.iptables:
    chain: LUDUS_USER_RULES
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "10.{{ range_second_octet }}.0.0/16"
    protocol: all
    jump: "{{ network.inter_vlan_default | default('ACCEPT') }}"
    state: present
    action: insert
    comment: "User Default: Inter-VLAN Rule"
    numeric: true

- name: Jump all traffic from FORWARD to LUDUS_DEFAULTS
  ansible.builtin.iptables:
    chain: FORWARD
    jump: LUDUS_DEFAULTS
    state: present
    action: insert
    rule_num: 1
    comment: "Default: Apply Ludus default routing rules"
    numeric: true

- name: Jump all traffic from FORWARD to LUDUS_TESTING
  ansible.builtin.iptables:
    chain: FORWARD
    jump: LUDUS_TESTING
    state: present
    action: insert
    rule_num: 2
    comment: "Default: Apply Ludus testing mode routing rules"
    numeric: true

- name: Jump all traffic from FORWARD to LUDUS_USER_RULES
  ansible.builtin.iptables:
    chain: FORWARD
    jump: LUDUS_USER_RULES
    state: present
    action: insert
    rule_num: 3
    comment: "Default: Apply Ludus user defined rules"
    numeric: true

- name: Deny all range traffic to SSH on this router
  ansible.builtin.iptables:
    chain: INPUT
    source: "10.{{ range_second_octet }}.0.0/16"
    destination_port: 22
    protocol: tcp
    jump: REJECT
    state: present
    action: insert
    comment: "Default: Deny SSH traffic from range to this router"
    numeric: true

- name: Jump all traffic from INPUT to LUDUS_DEFAULTS
  ansible.builtin.iptables:
    chain: INPUT
    jump: LUDUS_DEFAULTS
    state: present
    action: insert
    rule_num: 1
    comment: "Default: Apply Ludus default routing rules"
    numeric: true

- name: Loop over each user defined rule
  ansible.builtin.include_tasks:
    firewall-rules.yml
  loop: "{{ network.rules }}"
  when: 'network.rules is defined'

- name: Allow the Ludus IP to hit this router from the outside for ansible
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "192.0.2.254"
    in_interface: "{{ router_external_interface }}"
    protocol: all
    jump: ACCEPT
    state: present
    action: insert
    comment: "Default: Ludus access rule"
    numeric: true
    rule_num: 2

- name: Deny range traffic to the proxmox IP of "192.0.2.254"
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "192.0.2.254"
    protocol: all
    comment: "Default: Deny traffic to the host IP of 192.0.2.254"
    jump: REJECT
    state: present
    action: insert
    numeric: true
    rule_num: 3

- name: Deny range traffic to the host local IP
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ proxmox_local_ip }}"
    protocol: all
    comment: "Default: Deny traffic to the host IP of {{ proxmox_local_ip }}"
    jump: REJECT
    state: present
    action: insert
    numeric: true
    rule_num: 4

- name: Deny range traffic to the host public IP
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ proxmox_public_ip }}"
    protocol: all
    comment: "Default: Deny traffic to the public IP of {{ proxmox_public_ip }}"
    jump: REJECT
    state: present
    action: insert
    numeric: true
    rule_num: 5

# Since user wireguard rules are added to the LUDUS_DEFAULTS chain add this rule after the user defined rules so it will be on top
- name: Deny all range traffic to user defined "always_blocked_networks"
  ansible.builtin.iptables:
    chain: LUDUS_DEFAULTS
    source: "10.{{ range_second_octet }}.0.0/16"
    destination: "{{ item }}"
    protocol: all
    jump: REJECT
    state: present
    action: insert
    comment: "User Default: always_blocked_networks rule"
    numeric: true
    rule_num: 1 # This is the first rule in the LUDUS_DEFAULTS chain, taking precedence over any other rules
  loop: "{{ network.always_blocked_networks | default([]) }}"
  when: network.always_blocked_networks is defined

- name: Reset the conntrack entries to prevent previously allowed traffic to continue
  ansible.builtin.shell: conntrack -F
  async: 5 # Because this resets the conntrack entries, ansible will hang unless we run it async
  poll: 1

- name: Save current state of the firewall to a file
  community.general.iptables_state:
    state: saved
    path: /etc/iptables/rules.v4
