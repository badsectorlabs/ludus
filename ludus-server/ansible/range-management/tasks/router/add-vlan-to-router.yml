- name: Get the VM id of the router via Proxmox API
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" https://127.0.0.1:8006/api2/json/cluster/resources 'type:vm' | jq '.[] | .[] | select(.name=="{{ router.vm_name | default(range_id + '-router-debian11-x64') }}").vmid'
  register: router_id_command
  when: router_vm_id is not defined

- name: Set the router_vm_id from API lookup
  ansible.builtin.set_fact:
    router_vm_id: "{{ router_id_command.stdout }}"
  when: router_vm_id is not defined

- name: Get MAC for vlan interface
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/config" | jq -r '.[] | to_entries[] | select(.key|startswith("net")).value | select(contains("tag={{ item }}"))' | cut -d '=' -f 2 | cut -d ',' -f 1
  register: vlan_mac_command

- name: Show vlan_mac_command
  ansible.builtin.debug:
    msg: "{{ vlan_mac_command.stdout }}"

- name: Set the vlan_mac variable
  ansible.builtin.set_fact:
    vlan_mac: "{{ vlan_mac_command.stdout }}"
  when: vlan_mac_command.stdout | length != 0

- name: Show VLAN MAC
  ansible.builtin.debug:
    msg: "{{ vlan_mac }}"
  when: vlan_mac_command.stdout | length != 0

- name: Get interface for MAC of vlan interface
  ansible.builtin.shell: |
   curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/agent/network-get-interfaces" | jq -r '.[] | .result[] | select(."hardware-address"=="{{ vlan_mac | lower }}").name'
  register: interface_name_command
  when: vlan_mac_command.stdout | length != 0

- name: Set the interface_name_command variable
  ansible.builtin.set_fact:
    interface_name: "{{ interface_name_command.stdout }}"
  when: vlan_mac_command.stdout | length != 0

- name: Get the number for the next network interface (starts at 0)
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/config" | jq '.[] | . | keys[] | select(startswith("net"))' | wc -l
  register: next_interface_command
  when: interface_name is undefined or vlan_mac_command.stdout | length == 0

- name: Set the rotuer_net_interface variable
  ansible.builtin.set_fact:
    router_net_interface: "{{ next_interface_command.stdout }}"
  when: interface_name is undefined or vlan_mac_command.stdout | length == 0

- name: Add network interface to router
  community.general.proxmox_nic:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    vmid: "{{ router_vm_id }}"
    interface: "net{{ router_net_interface }}"
    bridge: "vmbr{{ vmbr_number }}"
    tag: "{{ item }}"
  when: interface_name is undefined or vlan_mac_command.stdout | length == 0
  register: network_add

# Now that the interface has been added, get the interface name on the router
- name: Get MAC for vlan interface
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/config" | jq -r '.[] | to_entries[] | select(.key|startswith("net")).value | select(contains("tag={{ item }}"))' | cut -d '=' -f 2 | cut -d ',' -f 1
  register: vlan_mac_command
  when: network_add is changed

- name: Set the vlan_mac variable
  ansible.builtin.set_fact:
    vlan_mac: "{{ vlan_mac_command.stdout }}"
  when: network_add is changed

- name: Get interface for MAC of vlan interface
  ansible.builtin.shell: |
   curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/agent/network-get-interfaces" | jq -r '.[] | .result[] | select(."hardware-address"=="{{ vlan_mac | lower }}").name'
  register: interface_name_command
  when: network_add is changed

- name: Set the interface_name_command variable
  ansible.builtin.set_fact:
    interface_name: "{{ interface_name_command.stdout }}"
  when: network_add is changed

# 192.0.2.x is set by the proxmox build
- name: Get the interface with a 192.0.2.x ip (WAN)
  ansible.builtin.shell: |
    curl -s -k -b "PVEAuthCookie={{ proxmox_ticket }}" "https://127.0.0.1:8006/api2/json/nodes/{{ node_name }}/qemu/{{ router_vm_id }}/agent/network-get-interfaces" | jq -r '.[] | .result[] | select(."ip-addresses"[]?."ip-address"|test("192.0.2")).name'
  register: wan_interface_command
  when: network_add is changed

- name: Set the router_external_interface variable
  ansible.builtin.set_fact:
    router_external_interface: "{{ wan_interface_command.stdout }}"
  when: network_add is changed

- name: Set up the IP configuration for the new interface
  ansible.builtin.blockinfile:
    path: /etc/network/interfaces
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR {{ hostvars['localhost']['interface_name'] }}"
    block: |
      auto {{ hostvars['localhost']['interface_name'] }}
      iface {{ hostvars['localhost']['interface_name'] }} inet static
          address 10.{{ range_second_octet }}.{{ item }}.254/24
          post-up   iptables -t nat -A POSTROUTING -s '10.{{ range_second_octet }}.{{ item }}.0/24' ! -d {{ wg_server_allowed_ips }} -o {{ router_external_interface }} -j MASQUERADE
          post-down iptables -t nat -D POSTROUTING -s '10.{{ range_second_octet }}.{{ item }}.0/24' ! -d {{ wg_server_allowed_ips }} -o {{ router_external_interface }} -j MASQUERADE
  delegate_to: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  register: interfaces_status
  when: network_add is changed

- name: Enable new interface
  ansible.builtin.shell: ifup {{ hostvars['localhost']['interface_name'] }}
  delegate_to: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  when: interfaces_status is changed

- name: Configure dnsmasq (part 1) - setup base config
  ansible.builtin.template:
    src: router-dnsmasq.conf.j2
    dest: /etc/dnsmasq.d/dnsmasq-{{ hostvars['localhost']['interface_name'] }}.conf
  delegate_to: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  when: interfaces_status is changed

- name: Configure dnsmasq (part 2) - enable and restart service
  ansible.builtin.service:
    name: dnsmasq
    enabled: true
    state: restarted
  delegate_to: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  when: interfaces_status is changed
