- name: Pre-run checks
  ansible.builtin.import_playbook: pre-run-checks.yml

- name: Gather VMs to snapshot, and IPs to action # IPs to action are IPs of machines that should be allowed out during testing
  tags: [always]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  tasks:
    - name: Collect VMs to snapshot
      ansible.builtin.set_fact:
        vm_names_to_snapshot: "{{ ((vm_names_to_snapshot | default([])) + [item.vm_name]) | unique }}"
      loop: "{{ ludus }}"
      when: item.testing is undefined or (item.testing is defined and item.testing.snapshot is undefined) or (item.testing.snapshot is defined and item.testing.snapshot)

    - name: Collect VM IDs to snapshot
      ansible.builtin.set_fact:
        vmids_to_snapshot: "{{ ((vmids_to_snapshot | default([])) + [hostvars[item.vm_name]['proxmox_vmid'] | default('')]) | unique }}"
      loop: "{{ ludus }}"
      when: item.testing is undefined or (item.testing is defined and item.testing.snapshot is undefined) or (item.testing.snapshot is defined and item.testing.snapshot)

    - name: Collect IPs to action from config
      ansible.builtin.set_fact:
        action_ips: "{{ ((action_ips | default([])) + ['10.' + range_second_octet | string + '.' + item.vlan | string + '.' + item.ip_last_octet | string]) | unique }}"
      loop: "{{ ludus }}"
      when: item.testing is defined and item.testing.block_internet is defined and not item.testing.block_internet

    - name: Collect IPs to action from ansible inventory
      ansible.builtin.set_fact:
        action_ips_from_inventory: "{{ ((action_ips_from_inventory | default([])) + [hostvars[item.vm_name]['ansible_host'] | default('')]) | unique }}"
      loop: "{{ ludus }}"
      when: item.testing is defined and item.testing.block_internet is defined and not item.testing.block_internet

    - name: Check if the LUDUS_TESTING chain exists
      ansible.builtin.shell: iptables -L LUDUS_TESTING -n
      register: testing_chain
      ignore_errors: true

    - name: If the LUDUS_TESTING chain does not exist, call compatibility.yml
      ansible.builtin.include_tasks: tasks/firewall/compatibility.yml
      when: testing_chain.rc != 0

# ==========================================================
# Start-testing
# ==========================================================
- name: Take a snapshot of all VMs where testing undefined or snapshot is true
  tags: [never, start-testing]
  hosts: localhost
  tasks:
    - name: Snapshot VMs
      # This task file requires vm_names_to_snapshot and vmids_to_snapshot to be set
      ansible.builtin.include_tasks: tasks/proxmox/snapshot-management.yml
  vars:
    snapshot_action: take_snapshot
    snapshot_name: ludus_automated_clean_snapshot
    include_RAM: "{{ defaults.snapshot_with_RAM }}" # allows you to revert to a running state, but uses more disk space and is slower
    stale_hours: "{{ hours_until_snapshot_stale }}"

- name: Block VMs from accessing the internet when testing undefined or block_internet is true
  tags: [never, start-testing]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
    - ansible.builtin.include_tasks: tasks/firewall/dns-management.yml
  vars:
    testing_action: block

# ==========================================================
# Stop-testing
# ==========================================================
- name: Revert to a snapshot for all test-range VMs
  tags: [never, stop-testing]
  hosts: localhost
  tasks:
    - name: Collect VMs to snapshot
      ansible.builtin.set_fact:
        vm_names_to_snapshot: "{{ ((vm_names_to_snapshot | default([])) + [item.vm_name]) | unique }}"
      loop: "{{ ludus }}"
      when: item.testing is undefined or (item.testing is defined and item.testing.snapshot is undefined) or (item.testing.snapshot is defined and item.testing.snapshot)

    - ansible.builtin.include_tasks: tasks/proxmox/snapshot-management.yml
  vars:
    snapshot_action: revert_snapshot
    snapshot_name: ludus_automated_clean_snapshot
    include_RAM: "{{ defaults.snapshot_with_RAM }}"
    allow_errors: "{{ force_stop }}"

- name: Allow test-range subnet from the internet
  tags: [never, stop-testing]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
    - ansible.builtin.include_tasks: tasks/firewall/dns-management.yml
  vars:
    testing_action: allow

- name: Set the time and check expiration of the DC(s)
  tags: [never, stop-testing]
  hosts: "{{ range_id }}_test_range_dc"
  ignore_unreachable: true
  tasks:
    - name: Try to set the NTP server to NIST
      ansible.windows.win_shell: |
        w32tm /config /manualpeerlist:"time.nist.gov" /syncfromflags:manual /update
      ignore_errors: true
    - name: Try to resync the time
      ansible.windows.win_shell: |
        w32tm /resync /rediscover
      ignore_errors: true
    - name: Try to resync the time 2
      ansible.windows.win_shell: |
        w32tm /resync /force
      ignore_errors: true
    - name: Check if the Windows evaluation is expiring/expired
      ansible.builtin.include_tasks:
        file: tasks/windows/rearm.yml

- name: Set the time and check expiration of Windows endpoints/servers
  tags: [never, stop-testing]
  hosts: "{{ range_id }}_windows_endpoints"
  ignore_unreachable: true
  vars:
    dns_server: "10.{{ range_second_octet }}.{{ (ludus | selectattr('vm_name', 'match', inventory_hostname) | first).vlan }}.254"
  tasks:
    - name: Try to set the NTP server to NIST
      ansible.windows.win_shell: |
        w32tm /config /manualpeerlist:"time.nist.gov" /syncfromflags:manual /update
      ignore_errors: true
    - name: Try to resync the time
      ansible.windows.win_shell: |
        w32tm /resync /rediscover
      ignore_errors: true
    - name: Try to resync the time 2
      ansible.windows.win_shell: |
        w32tm /resync /force
      ignore_errors: true
    - name: Check if the Windows evaluation is expiring/expired
      ansible.builtin.include_tasks:
        file: tasks/windows/rearm.yml

# ==========================================================
# Firewall management
# ==========================================================
- name: Allow VMs to an IP
  tags: [never, allow-ip]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
  vars:
    testing_action: open
    ip: "{{ action_ip }}"

- name: Allow VMs to a domain
  tags: [never, allow-domain]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
    - ansible.builtin.include_tasks: tasks/firewall/dns-management.yml
  vars:
    testing_action: allow-domain

- name: Deny VMs to an IP
  tags: [never, deny-ip]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
  vars:
    testing_action: close
    ip: "{{ action_ip }}"

- name: Deny VMs to a domain
  tags: [never, deny-domain]
  hosts: "{{ router.vm_name | default(range_id + '-router-debian11-x64') }}"
  become: true
  tasks:
    - ansible.builtin.include_tasks: tasks/firewall/firewall-management.yml
    - ansible.builtin.include_tasks: tasks/firewall/dns-management.yml
  vars:
    testing_action: deny-domain
    domain: "{{ action_domain }}"
